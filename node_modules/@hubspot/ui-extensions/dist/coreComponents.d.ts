import type * as types from './types';
/**
 * The `Alert` component renders an alert within a card. Use this component to give usage guidance, notify users of action results, or warn them about potential issues or failures.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/alert Docs}
 * - {@link https://app.hubspot.com/docs/48008916/reference/ui-components/standard-components/alert#variants Variants}
 */
export declare const Alert: "Alert" & {
    readonly type?: "Alert" | undefined;
    readonly props?: types.AlertProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Alert", types.AlertProps, true>>;
/**
 * The `Button` component renders a single button. Use this component to enable users to perform actions, such as submitting a form, sending data to an external system, or deleting data.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/button Docs}
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/button#usage-examples Examples}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/design-patterns#button Design Pattern Examples}
 */
export declare const Button: "Button" & {
    readonly type?: "Button" | undefined;
    readonly props?: types.ButtonProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Button", types.ButtonProps, true>>;
/**
 * The `ButtonRow` component renders a row of specified `Button` components. Use this component when you want to include multiple buttons in a row.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/button-row Docs}
 */
export declare const ButtonRow: "ButtonRow" & {
    readonly type?: "ButtonRow" | undefined;
    readonly props?: types.ButtonRowProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ButtonRow", types.ButtonRowProps, true>>;
export declare const Card: "Card" & {
    readonly type?: "Card" | undefined;
    readonly props?: types.CardProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Card", types.CardProps, true>>;
/**
 * The `DescriptionList` component renders pairs of labels and values. Use this component to display pairs of labels and values in a way that's easy to read at a glance.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/description-list Docs}
 */
export declare const DescriptionList: "DescriptionList" & {
    readonly type?: "DescriptionList" | undefined;
    readonly props?: types.DescriptionListProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DescriptionList", types.DescriptionListProps, true>>;
/**
 * The `DescriptionListItem` component renders a single set of a label and value. Use this component within a `DescriptionList` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/description-list Docs}
 */
export declare const DescriptionListItem: "DescriptionListItem" & {
    readonly type?: "DescriptionListItem" | undefined;
    readonly props?: types.DescriptionListItemProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DescriptionListItem", types.DescriptionListItemProps, true>>;
/**
 * The `Divider` component renders a grey, horizontal line for spacing out components vertically or creating sections in an extension. Use this component to space out other components when the content needs more separation than white space.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/divider Docs}
 */
export declare const Divider: "Divider" & {
    readonly type?: "Divider" | undefined;
    readonly props?: types.DividerProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Divider", types.DividerProps, true>>;
/**
 * The `EmptyState` component sets the content that appears when the extension is in an empty state. Use this component when there's no content or data to help guide users.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/empty-state Docs}
 */
export declare const EmptyState: "EmptyState" & {
    readonly type?: "EmptyState" | undefined;
    readonly props?: types.EmptyStateProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"EmptyState", types.EmptyStateProps, true>>;
/**
 * The `ErrorState` component sets the content of an erroring extension. Use this component to guide users through resolving errors that your extension might encounter.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/error-state Docs}
 */
export declare const ErrorState: "ErrorState" & {
    readonly type?: "ErrorState" | undefined;
    readonly props?: types.ErrorStateProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ErrorState", types.ErrorStateProps, true>>;
/**
 * The `Form` component renders a form that can contain other subcomponents, such as `Input`, `Select`, and `Button`. Use this component to enable users to submit data to HubSpot or an external system.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/form Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/design-patterns#form Design Pattern Examples}
 */
export declare const Form: "Form" & {
    readonly type?: "Form" | undefined;
    readonly props?: types.FormProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Form", types.FormProps, true>>;
/**
 * The `Heading` component renders large heading text. Use this component to introduce or differentiate sections of your component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/heading Docs}
 */
export declare const Heading: "Heading" & {
    readonly type?: "Heading" | undefined;
    readonly props?: types.HeadingProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Heading", types.HeadingProps, true>>;
/**
 * The `Image` component renders an image. Use this component to add a logo or other visual brand identity asset, or to accentuate other content in the extension.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/image Docs}
 */
export declare const Image: "Image" & {
    readonly type?: "Image" | undefined;
    readonly props?: types.ImageProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Image", types.ImageProps, true>>;
/**
 * The `Input` component renders a text input field where a user can enter a custom text value. Like other inputs, this component should be used within a `Form` that has a submit button.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/input Docs}
 */
export declare const Input: "Input" & {
    readonly type?: "Input" | undefined;
    readonly props?: types.InputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Input", types.InputProps, true>>;
/**
 * The `Link` component renders a clickable hyperlink. Use links to direct users to an external web page or another part of the HubSpot app.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/link Docs}
 */
export declare const Link: "Link" & {
    readonly type?: "Link" | undefined;
    readonly props?: types.LinkProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Link", types.LinkProps, true>>;
/**
 * The `TextArea` component renders a fillable text field. Like other inputs, this component should be used within a `Form` that has a submit button.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/text-area Docs}
 */
export declare const TextArea: "TextArea" & {
    readonly type?: "TextArea" | undefined;
    readonly props?: types.TextAreaProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TextArea", types.TextAreaProps, true>>;
/** @deprecated use TextArea instead. With a capital A.*/
export declare const Textarea: "Textarea" & {
    readonly type?: "Textarea" | undefined;
    readonly props?: types.TextAreaProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Textarea", types.TextAreaProps, true>>;
/**
 * The `LoadingSpinner` component renders a visual indicator for when an extension is loading or processing data.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/loading-spinner Docs}
 */
export declare const LoadingSpinner: "LoadingSpinner" & {
    readonly type?: "LoadingSpinner" | undefined;
    readonly props?: types.LoadingSpinnerProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"LoadingSpinner", types.LoadingSpinnerProps, true>>;
/**
 * The `ProgressBar` component renders a visual indicator showing a numeric and/or percentage-based representation of progress. The percentage is calculated based on the maximum possible value specified in the component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/progress-bar Docs}
 */
export declare const ProgressBar: "ProgressBar" & {
    readonly type?: "ProgressBar" | undefined;
    readonly props?: types.ProgressBarProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ProgressBar", types.ProgressBarProps, true>>;
/**
 * The `Select` component renders a dropdown menu select field where a user can select a single value. A search bar will be automatically included when there are more than seven options. Like other inputs, this component should be used within a `Form` that has a submit button.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/select Docs}
 */
export declare const Select: "Select" & {
    readonly type?: "Select" | undefined;
    readonly props?: types.SelectProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Select", types.SelectProps, true>>;
/**
 * The `Tag` component renders a tag to label or categorize information or other components. Tags can be static or clickable for invoking functions.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/tag Docs}
 */
export declare const Tag: "Tag" & {
    readonly type?: "Tag" | undefined;
    readonly props?: types.TagProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Tag", types.TagProps, true>>;
/**
 * The `Text` component renders text with formatting options.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/text Docs}
 */
export declare const Text: "Text" & {
    readonly type?: "Text" | undefined;
    readonly props?: types.TextProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Text", types.TextProps, true>>;
/**
 * The `Tile` component renders a square tile that can contain other components. Use this component to create groups of related components.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/tile Docs}
 */
export declare const Tile: "Tile" & {
    readonly type?: "Tile" | undefined;
    readonly props?: types.TileProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Tile", types.TileProps, true>>;
/** @deprecated use Flex instead. It will be removed in the next release. */
export declare const Stack: "Stack" & {
    readonly type?: "Stack" | undefined;
    readonly props?: types.StackProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Stack", types.StackProps, true>>;
/**
 * The `ToggleGroup` component renders a list of selectable options, either in radio button or checkbox form.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/toggle-group Docs}
 */
export declare const ToggleGroup: "ToggleGroup" & {
    readonly type?: "ToggleGroup" | undefined;
    readonly props?: ({
        toggleType: "checkboxList";
        onChange?: ((value: string[]) => void) | undefined;
        value?: string[] | undefined;
    } & types.CommonGroupProps) | ({
        toggleType: "radioButtonList";
        onChange?: ((value: string) => void) | undefined;
        value?: string | undefined;
    } & types.CommonGroupProps) | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ToggleGroup", ({
    toggleType: "checkboxList";
    onChange?: ((value: string[]) => void) | undefined;
    value?: string[] | undefined;
} & types.CommonGroupProps) | ({
    toggleType: "radioButtonList";
    onChange?: ((value: string) => void) | undefined;
    value?: string | undefined;
} & types.CommonGroupProps), true>>;
/**
 * The `StatisticsItem` component renders a single data point within a `Statistics` component. Use this component to display a single data point, such as a number or percentage.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/statistics Docs}
 */
export declare const StatisticsItem: "StatisticsItem" & {
    readonly type?: "StatisticsItem" | undefined;
    readonly props?: types.StatisticsItemProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StatisticsItem", types.StatisticsItemProps, true>>;
/**
 * The `Statistics` component renders a visual spotlight of one or more data points. Includes the `StatisticsItem` and `StatisticsTrend` subcomponents.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/statistics Docs}
 */
export declare const Statistics: "Statistics" & {
    readonly type?: "Statistics" | undefined;
    readonly props?: types.StatisticsProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Statistics", types.StatisticsProps, true>>;
/**
 * The `StatisticsTrend` component renders a percentage trend value and direction alonside a `StatisticsItem` component. Use this component within the `StatisticsItem` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/statistics Docs}
 */
export declare const StatisticsTrend: "StatisticsTrend" & {
    readonly type?: "StatisticsTrend" | undefined;
    readonly props?: types.StatisticsTrendProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StatisticsTrend", types.StatisticsTrendProps, true>>;
/**
 * The `Table` component renders a table. To format the table, use the subcomponents `TableHead`, `TableRow`, `TableHeader`, `TableBody`, `TableCell`and `TableFooter`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/design-patterns#table Design Pattern Example}
 */
export declare const Table: "Table" & {
    readonly type?: "Table" | undefined;
    readonly props?: types.TableProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Table", types.TableProps, true>>;
/**
 * The `TableFooter` component renders a footer within a `Table` component. Use this component to display totals or other summary information.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 */
export declare const TableFooter: "TableFooter" & {
    readonly type?: "TableFooter" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableFooter", types.TableElementProps, true>>;
/**
 * The `TableCell` component renders individual cells within the `TableBody` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 */
export declare const TableCell: "TableCell" & {
    readonly type?: "TableCell" | undefined;
    readonly props?: types.TableCellProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableCell", types.TableCellProps, true>>;
/**
 * The `TableRow` component renders a row within the `TableBody` or `TableHead` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 */
export declare const TableRow: "TableRow" & {
    readonly type?: "TableRow" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableRow", types.TableElementProps, true>>;
/**
 * The `TableBody` component renders the body (rows and cells) of a table within the `Table` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 */
export declare const TableBody: "TableBody" & {
    readonly type?: "TableBody" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableBody", types.TableElementProps, true>>;
/**
 * The `TableHeader` component renders individual cells containing bolded column labels, within `TableHead`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 */
export declare const TableHeader: "TableHeader" & {
    readonly type?: "TableHeader" | undefined;
    readonly props?: types.TableHeaderProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableHeader", types.TableHeaderProps, true>>;
/**
 * The `TableHead` component renders the header section of the `Table` component, containing column labels.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/table Docs}
 */
export declare const TableHead: "TableHead" & {
    readonly type?: "TableHead" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableHead", types.TableElementProps, true>>;
/**
 * The `NumberInput` component renders a number input field. Like other inputs, this component should be used within a `Form` that has a submit button.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/number-input Docs}
 */
export declare const NumberInput: "NumberInput" & {
    readonly type?: "NumberInput" | undefined;
    readonly props?: types.NumberInputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"NumberInput", types.NumberInputProps, true>>;
/**
 * The `Box` component renders an empty div container for fine tuning the spacing of components. Commonly used with the `Flex` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/box Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/flex-and-box Flex and Box Example}
 */
export declare const Box: "Box" & {
    readonly type?: "Box" | undefined;
    readonly props?: types.BoxProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Box", types.BoxProps, true>>;
/**
 * The `StepIndicator` component renders an indicator to show the current step of a multi-step process.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/step-indicator Docs}
 */
export declare const StepIndicator: "StepIndicator" & {
    readonly type?: "StepIndicator" | undefined;
    readonly props?: types.StepIndicatorProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StepIndicator", types.StepIndicatorProps, true>>;
/**
 * The `Accordion` component renders an expandable and collapsable section that can contain other components. This component can be helpful for saving space and breaking up extension content.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/accordion Docs}
 */
export declare const Accordion: "Accordion" & {
    readonly type?: "Accordion" | undefined;
    readonly props?: types.AccordionProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Accordion", types.AccordionProps, true>>;
/**
 * The MultiSelect component renders a dropdown menu select field where a user can select multiple values. Commonly used within the `Form` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/multi-select Docs}
 */
export declare const MultiSelect: "MultiSelect" & {
    readonly type?: "MultiSelect" | undefined;
    readonly props?: types.MultiSelectProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"MultiSelect", types.MultiSelectProps, true>>;
/**
 * The `Flex` component renders a flex container that can contain other components, and arrange them with props. Use this component to create a flexible and responsive layout.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/flex Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/flex-and-box Flex and Box Example}
 */
export declare const Flex: "Flex" & {
    readonly type?: "Flex" | undefined;
    readonly props?: types.FlexProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Flex", types.FlexProps, true>>;
/**
 * The `DateInput` component renders an input field where a user can select a date. Commonly used within the `Form` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/date-input Docs}
 */
export declare const DateInput: "DateInput" & {
    readonly type?: "DateInput" | undefined;
    readonly props?: types.DateInputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DateInput", types.DateInputProps, true>>;
/**
 * The `Checkbox` component renders a single checkbox input. Commonly used within the `Form` component. If you want to display multiple checkboxes, you should use `ToggleGroup` instead, as it comes with extra logic for handling multiple checkboxes.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/checkbox Docs}
 */
export declare const Checkbox: "Checkbox" & {
    readonly type?: "Checkbox" | undefined;
    readonly props?: types.CheckboxProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Checkbox", types.CheckboxProps, true>>;
/**
 * The `RadioButton` component renders a single radio input. Commonly used within the `Form` component. If you want to display multiple radio inputs, you should use `ToggleGroup` instead, as it comes with extra logic for handling multiple inputs.
 */
export declare const RadioButton: "RadioButton" & {
    readonly type?: "RadioButton" | undefined;
    readonly props?: types.RadioButtonProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"RadioButton", types.RadioButtonProps, true>>;
/**
 * The `List` component renders a list of items. Use this component to display a list of items, such as a list of contacts, tasks, or other data. A list can be styled as a bulleted list or a numbered list.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/list Docs}
 */
export declare const List: "List" & {
    readonly type?: "List" | undefined;
    readonly props?: types.ListProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"List", types.ListProps, true>>;
/**
 * The `Toggle` component renders a boolean toggle switch that can be configured with sizing, label position, read-only, and more.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/toggle Docs}
 */
export declare const Toggle: "Toggle" & {
    readonly type?: "Toggle" | undefined;
    readonly props?: types.ToggleProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Toggle", types.ToggleProps, true>>;
/**
 * The `Dropdown` component renders a dropdown menu that can appear as a button or hyperlink. Use this component to enable users to select from multiple options in a compact list.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/dropdown Docs}
 */
export declare const Dropdown: "Dropdown" & {
    readonly type?: "Dropdown" | undefined;
    readonly props?: types.DropdownProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Dropdown", types.DropdownProps, true>>;
/**
 * The Panel component renders a panel overlay on the right side of the page and contains other components.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/panel Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/design-patterns#panel Design Pattern Examples}
 */
export declare const Panel: "Panel" & {
    readonly type?: "Panel" | undefined;
    readonly props?: types.PanelProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Panel", types.PanelProps, true>>;
/**
 * The `PanelFooter` is a sticky footer component displayed at the bottom of a `Panel` component. Use this component to display actions or other content that should be visible at all times. Include only one `PanelFooter` component per `Panel`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/panel-footer Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 */
export declare const PanelFooter: "PanelFooter" & {
    readonly type?: "PanelFooter" | undefined;
    readonly props?: types.PanelFooterProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"PanelFooter", types.PanelFooterProps, true>>;
/**
 * The `PanelBody` component is a container that wraps the panel's content and makes it scrollable. Include only one `PanelBody` component per `Panel`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/panel-footer Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 */
export declare const PanelBody: "PanelBody" & {
    readonly type?: "PanelBody" | undefined;
    readonly props?: types.PanelBodyProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"PanelBody", types.PanelBodyProps, true>>;
/**
 * The `PanelSection` component is a container that adds padding and bottom margin to provide spacing between content. Use the `PanelSection` component to separate content within a `PanelBody`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/panel-footer Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 */
export declare const PanelSection: "PanelSection" & {
    readonly type?: "PanelSection" | undefined;
    readonly props?: types.PanelSectionProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"PanelSection", types.PanelSectionProps, true>>;
/**
 * The `StepperInput` component renders a number input field that can be increased or decreased by a set number. Commonly used within the `Form` component.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/stepper-input Docs}
 */
export declare const StepperInput: "StepperInput" & {
    readonly type?: "StepperInput" | undefined;
    readonly props?: types.StepperInputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StepperInput", types.StepperInputProps, true>>;
/**
 * The Modal component renders a pop-up overlay that can contain other components.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/modal Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/design-patterns#modal Design Pattern Examples}
 */
export declare const Modal: "Modal" & {
    readonly type?: "Modal" | undefined;
    readonly props?: types.ModalProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Modal", types.ModalProps, true>>;
/**
 * The `ModalBody` component contains the main content of the modal. One `ModalBody` is required per `Modal`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/modal Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 */
export declare const ModalBody: "ModalBody" & {
    readonly type?: "ModalBody" | undefined;
    readonly props?: types.ModalBodyProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ModalBody", types.ModalBodyProps, true>>;
/**
 * The `ModalFooter` component is an optional component to format the footer section of the modal. Use one `ModalFooter` per `Modal`.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/modal Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/overlay-example Overlay Example}
 */
export declare const ModalFooter: "ModalFooter" & {
    readonly type?: "ModalFooter" | undefined;
    readonly props?: types.ModalFooterProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ModalFooter", types.ModalFooterProps, true>>;
/**
 * Use the `Icon` component to render a visual icon within other components. It can generally be used inside most components, excluding ones that don't support child components.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/icon Docs}
 */
export declare const Icon: "Icon" & {
    readonly type?: "Icon" | undefined;
    readonly props?: types.IconProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Icon", types.IconProps, true>>;
/**
 * The `StatusTag` component renders a visual indicator to display the current status of an item. Status tags can be static or clickable.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/status-tag Docs}
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/status-tag#variants Variants}
 */
export declare const StatusTag: "StatusTag" & {
    readonly type?: "StatusTag" | undefined;
    readonly props?: types.StatusTagProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StatusTag", types.StatusTagProps, true>>;
/**
 * The `LoadingButton` component renders a button with loading state options.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/loading-button Docs}
 */
export declare const LoadingButton: "LoadingButton" & {
    readonly type?: "LoadingButton" | undefined;
    readonly props?: types.LoadingButtonProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"LoadingButton", types.LoadingButtonProps, true>>;
/**
 * The `BarChart` component renders a bar chart for visualizing data. This type of chart is best suited for comparing categorical data.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/bar-chart BarChart Docs}
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/charts Charts Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/charts-example Charts Example}
 */
export declare const BarChart: "BarChart" & {
    readonly type?: "BarChart" | undefined;
    readonly props?: types.ChartProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"BarChart", types.ChartProps, true>>;
/**
 * The `LineChart` component renders a line chart for visualizing data. This type of chart is best suited for time series plots or trend data.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/line-chart LineChart Docs}
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/charts Charts Docs}
 * - {@link https://github.com/HubSpot/ui-extensions-examples/tree/main/charts-example Charts Example}
 */
export declare const LineChart: "LineChart" & {
    readonly type?: "LineChart" | undefined;
    readonly props?: types.ChartProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"LineChart", types.ChartProps, true>>;
