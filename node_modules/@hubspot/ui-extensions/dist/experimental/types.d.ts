import type { ReactNode } from 'react';
import type { RemoteFragment } from '@remote-ui/core';
import type { AllDistances, ExtensionEvent, ReactionsHandler } from '../types';
/**
 * @ignore
 * @experimental do not use in production
 */
export interface TabsProps {
    /**
     * Sets the content that will render inside the component.
     */
    children?: ReactNode;
    /**
     * Callback when the selected tab changes.
     */
    onSelectedChange?: (selectedId: string | number) => void;
    /**
     * The initially selected tab ID.
     */
    defaultSelected?: string | number;
    /**
     * The currently selected tab ID (controlled component).
     */
    selected?: string | number;
    /**
     * Visual style variant of the tabs.
     * @defaultValue 'default'
     */
    variant?: 'default' | 'enclosed' | 'enclosed-shaded';
    /**
     * Whether the tab should fill available space.
     */
    fill?: boolean;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface TabProps {
    /**
     * Whether the tab is disabled.
     */
    disabled?: boolean;
    /**
     * Unique identifier for the tab.
     */
    tabId?: string | number;
    /**
     * The title text of the tab.
     */
    title?: string;
    /**
     * The content to display when this tab is selected.
     */
    children?: ReactNode;
    /**
     * The tooltip text of the tab.
     */
    tooltip?: string;
}
/**
 * @ignore
 * @experimental do not use in production
 */
interface BaseLayout {
    fullWidth?: boolean;
    fullHeight?: boolean;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export type FlexJustify = 'center' | 'end' | 'start' | 'around' | 'between';
/**
 * @ignore
 * @experimental do not use in production
 */
export type FlexAlign = 'start' | 'center' | 'baseline' | 'end' | 'stretch';
/**
 * @ignore
 * @experimental do not use in production
 */
export interface InlineProps extends BaseLayout {
    justify?: FlexJustify;
    align?: FlexAlign;
    gap?: AllDistances;
    children?: ReactNode;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface Stack2Props extends BaseLayout {
    align?: FlexAlign;
    gap?: AllDistances;
    children?: ReactNode;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface CenterProps extends BaseLayout {
    maxContentSize?: number | string;
    gutter?: AllDistances;
    children?: ReactNode;
}
/**
 * @ignore
 * @experimental
 */
export interface MediaObjectProps {
    align?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    spacing?: 'none' | 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large';
    children?: ReactNode;
    itemLeft?: RemoteFragment;
    itemRight?: RemoteFragment;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface SimpleGridProps extends BaseLayout {
    minColumnWidth: number | string;
    gap?: AllDistances;
    children?: ReactNode;
}
export interface GridProps {
    justify?: FlexJustify;
    align?: FlexAlign;
    gap?: AllDistances;
    size?: number;
    children?: ReactNode;
}
export interface GridItemProps {
    size?: number;
    children?: ReactNode;
    offset?: number;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface SettingsViewProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * If set to `true`, will show the save bar with "cancel" and  "save" buttons at the bottom of the page.
     *
     * @defaultValue `false`
     */
    saveBarVisible?: boolean;
    /**
     * Used in the save bar to let the user know how many settings they've changed and not yet saved.
     */
    numberOfSettingsChanged?: number;
    /**
     * The function that will be invoked when the save button in the save bar is clicked.
     *
     * @event
     */
    onSave?: ReactionsHandler<ExtensionEvent>;
    /**
     * The function that will be invoked when the cancel button in the save bar is clicked.
     *
     * @event
     */
    onCancel?: ReactionsHandler<ExtensionEvent>;
}
export {};
