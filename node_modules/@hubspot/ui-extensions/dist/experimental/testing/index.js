import { createRoot } from '@remote-ui/react';
import { mount } from '@remote-ui/testing';
/** @experimental This function is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
export function render(ui) {
    const mountedExtension = mount((coreRemoteRoot) => {
        // create the react appliction to render remote react component
        createRoot(coreRemoteRoot).render(ui);
    });
    function findByName(name) {
        return mountedExtension.find(name);
    }
    // @ts-expect-error ts doesn't know the type of object that we are forwarding to
    const extension = new Proxy({ findByName }, //target object
    {
        // traps and modifies calls to target object
        get(target, key, receiver) {
            // if target object has the key, invoke.
            if (Reflect.ownKeys(target).includes(key)) {
                return Reflect.get(target, key, receiver);
            }
            // if our target object doesn't have the key, pass to the extension
            return Reflect.get(mountedExtension, key);
        },
    });
    function flushAsync() {
        // the promise with the setTimeout is what flushes the promise stack
        return new Promise((resolve) => setTimeout(resolve, 0)).then(() => {
            // the act call on the extension forces the UI to update
            mountedExtension.act(() => null);
        });
    }
    return { extension, flushAsync };
}
