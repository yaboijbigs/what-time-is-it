import { logger } from '../../logger';
/**
 * Core logic for managing CRM property interactions.
 */
export function createPropertyManager(actions) {
    const { fetchCrmObjectProperties, onCrmPropertiesUpdate, refreshObjectProperties, } = actions;
    let cleanup;
    return {
        initializePropertyMonitoring(properties, onInitialFetch, onUpdate) {
            // Clean up any existing listeners.
            if (cleanup) {
                cleanup();
            }
            // Set up property update listener.
            let isSubscribed = true;
            const updateCallback = (props) => {
                if (isSubscribed) {
                    onUpdate(props);
                }
            };
            onCrmPropertiesUpdate(properties, updateCallback);
            // Fetch initial properties
            fetchCrmObjectProperties(properties)
                .then(onInitialFetch)
                .catch((error) => {
                logger.error(`Error fetching CRM object properties: ${error}`);
            });
            // Return cleanup function
            cleanup = () => {
                isSubscribed = false;
            };
            return cleanup;
        },
        refreshProperties: refreshObjectProperties,
    };
}
