(function(React2, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch
  };
  react.createRemoteReactComponent("Alert");
  react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("Input");
  react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  const LoadingSpinner = react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  const Box = react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  const StatusTag = react.createRemoteReactComponent("StatusTag");
  react.createRemoteReactComponent("LoadingButton", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("BarChart");
  react.createRemoteReactComponent("LineChart");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  hubspot.extend(({ context }) => /* @__PURE__ */ React2.createElement(TimeCard, { context }));
  const TimeCard = ({ context }) => {
    const [currentTime, setCurrentTime] = React2.useState("");
    const [name, setName] = React2.useState("");
    const [loading, setLoading] = React2.useState(true);
    const [timezone, setTimezone] = React2.useState(null);
    const [timezoneStatus, setTimezoneStatus] = React2.useState("set");
    const [errorMessage, setErrorMessage] = React2.useState("");
    const [objectDetails, setObjectDetails] = React2.useState({});
    React2.useEffect(() => {
      async function fetchData() {
        var _a, _b;
        try {
          const objectTypeId = (_a = context == null ? void 0 : context.crm) == null ? void 0 : _a.objectTypeId;
          const objectId = (_b = context == null ? void 0 : context.crm) == null ? void 0 : _b.objectId;
          let objectType = "unknown";
          if (objectTypeId === "0-1")
            objectType = "contacts";
          else if (objectTypeId === "0-2")
            objectType = "companies";
          setObjectDetails({
            objectType,
            objectId,
            objectTypeId
          });
          const result = await hubspot.serverless("getContactData", {
            parameters: {
              hs_object_id: objectId,
              objectType
            }
          });
          if (result.status === "SUCCESS") {
            setName(result.properties.name);
            setTimezone(result.timezone);
            setTimezoneStatus(result.timezoneStatus || "set");
          } else {
            throw new Error(result.message || "Unknown error occurred");
          }
        } catch (error) {
          console.error("Error fetching data:", error);
          setErrorMessage(`Error: ${error.message || "Unknown error"}`);
          setTimezone("UTC");
          setTimezoneStatus("error");
          setName("Unknown");
        } finally {
          setLoading(false);
        }
      }
      fetchData();
    }, [context]);
    React2.useEffect(() => {
      if (!timezone)
        return;
      if (timezoneStatus === "not_set") {
        setCurrentTime("No timezone set");
        return;
      }
      const updateTime = () => {
        try {
          const time = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
            hour: "numeric",
            minute: "numeric",
            second: "numeric",
            hour12: true,
            timeZone: timezone
          });
          setCurrentTime(time);
        } catch (error) {
          console.error("Error formatting time:", error);
          setCurrentTime("Unavailable");
        }
      };
      updateTime();
      const intervalId = setInterval(updateTime, 1e3);
      return () => clearInterval(intervalId);
    }, [timezone, timezoneStatus]);
    if (loading) {
      return /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "md", padding: "md", alignItems: "center" }, /* @__PURE__ */ React2.createElement(LoadingSpinner, null), /* @__PURE__ */ React2.createElement(Text, null, "Loading time data..."));
    }
    return /* @__PURE__ */ React2.createElement(Flex, { direction: "column", gap: "md", padding: "md" }, /* @__PURE__ */ React2.createElement(Box, null, /* @__PURE__ */ React2.createElement(Text, { variant: "h3" }, "Current time for ", name, ": ", " ", /* @__PURE__ */ React2.createElement(Text, { inline: true, format: { fontWeight: "bold" } }, timezoneStatus === "not_set" ? "No timezone set" : currentTime)), /* @__PURE__ */ React2.createElement(Text, null, /* @__PURE__ */ React2.createElement(StatusTag, { variant: timezoneStatus === "not_set" ? "warning" : "info" }, timezoneStatus === "not_set" ? "No timezone" : timezone))), errorMessage && /* @__PURE__ */ React2.createElement(Box, null, /* @__PURE__ */ React2.createElement(Text, { color: "error" }, errorMessage)));
  };
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
