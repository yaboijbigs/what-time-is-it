"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseSingleSendApi = exports.PromisePublicSMTPTokensApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromisePublicSMTPTokensApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservablePublicSMTPTokensApi(configuration, requestFactory, responseProcessor);
    }
    archiveTokenWithHttpInfo(tokenId, _options) {
        const result = this.api.archiveTokenWithHttpInfo(tokenId, _options);
        return result.toPromise();
    }
    archiveToken(tokenId, _options) {
        const result = this.api.archiveToken(tokenId, _options);
        return result.toPromise();
    }
    createTokenWithHttpInfo(smtpApiTokenRequestEgg, _options) {
        const result = this.api.createTokenWithHttpInfo(smtpApiTokenRequestEgg, _options);
        return result.toPromise();
    }
    createToken(smtpApiTokenRequestEgg, _options) {
        const result = this.api.createToken(smtpApiTokenRequestEgg, _options);
        return result.toPromise();
    }
    getTokenByIdWithHttpInfo(tokenId, _options) {
        const result = this.api.getTokenByIdWithHttpInfo(tokenId, _options);
        return result.toPromise();
    }
    getTokenById(tokenId, _options) {
        const result = this.api.getTokenById(tokenId, _options);
        return result.toPromise();
    }
    getTokensPageWithHttpInfo(campaignName, emailCampaignId, after, limit, _options) {
        const result = this.api.getTokensPageWithHttpInfo(campaignName, emailCampaignId, after, limit, _options);
        return result.toPromise();
    }
    getTokensPage(campaignName, emailCampaignId, after, limit, _options) {
        const result = this.api.getTokensPage(campaignName, emailCampaignId, after, limit, _options);
        return result.toPromise();
    }
    resetPasswordWithHttpInfo(tokenId, _options) {
        const result = this.api.resetPasswordWithHttpInfo(tokenId, _options);
        return result.toPromise();
    }
    resetPassword(tokenId, _options) {
        const result = this.api.resetPassword(tokenId, _options);
        return result.toPromise();
    }
}
exports.PromisePublicSMTPTokensApi = PromisePublicSMTPTokensApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseSingleSendApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableSingleSendApi(configuration, requestFactory, responseProcessor);
    }
    sendEmailWithHttpInfo(publicSingleSendRequestEgg, _options) {
        const result = this.api.sendEmailWithHttpInfo(publicSingleSendRequestEgg, _options);
        return result.toPromise();
    }
    sendEmail(publicSingleSendRequestEgg, _options) {
        const result = this.api.sendEmail(publicSingleSendRequestEgg, _options);
        return result.toPromise();
    }
}
exports.PromiseSingleSendApi = PromiseSingleSendApi;
//# sourceMappingURL=PromiseAPI.js.map