"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseReportApi = exports.PromiseBatchApi = exports.PromiseBasicApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseBasicApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableBasicApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(objectType, objectId, toObjectType, toObjectId, _options) {
        const result = this.api.archiveWithHttpInfo(objectType, objectId, toObjectType, toObjectId, _options);
        return result.toPromise();
    }
    archive(objectType, objectId, toObjectType, toObjectId, _options) {
        const result = this.api.archive(objectType, objectId, toObjectType, toObjectId, _options);
        return result.toPromise();
    }
    createWithHttpInfo(objectType, objectId, toObjectType, toObjectId, associationSpec, _options) {
        const result = this.api.createWithHttpInfo(objectType, objectId, toObjectType, toObjectId, associationSpec, _options);
        return result.toPromise();
    }
    create(objectType, objectId, toObjectType, toObjectId, associationSpec, _options) {
        const result = this.api.create(objectType, objectId, toObjectType, toObjectId, associationSpec, _options);
        return result.toPromise();
    }
    createDefaultWithHttpInfo(fromObjectType, fromObjectId, toObjectType, toObjectId, _options) {
        const result = this.api.createDefaultWithHttpInfo(fromObjectType, fromObjectId, toObjectType, toObjectId, _options);
        return result.toPromise();
    }
    createDefault(fromObjectType, fromObjectId, toObjectType, toObjectId, _options) {
        const result = this.api.createDefault(fromObjectType, fromObjectId, toObjectType, toObjectId, _options);
        return result.toPromise();
    }
    getPageWithHttpInfo(objectType, objectId, toObjectType, after, limit, _options) {
        const result = this.api.getPageWithHttpInfo(objectType, objectId, toObjectType, after, limit, _options);
        return result.toPromise();
    }
    getPage(objectType, objectId, toObjectType, after, limit, _options) {
        const result = this.api.getPage(objectType, objectId, toObjectType, after, limit, _options);
        return result.toPromise();
    }
}
exports.PromiseBasicApi = PromiseBasicApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseBatchApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableBatchApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, _options) {
        const result = this.api.archiveWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, _options);
        return result.toPromise();
    }
    archive(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, _options) {
        const result = this.api.archive(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, _options);
        return result.toPromise();
    }
    archiveLabelsWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options) {
        const result = this.api.archiveLabelsWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options);
        return result.toPromise();
    }
    archiveLabels(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options) {
        const result = this.api.archiveLabels(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options);
        return result.toPromise();
    }
    createWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options) {
        const result = this.api.createWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options);
        return result.toPromise();
    }
    create(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options) {
        const result = this.api.create(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options);
        return result.toPromise();
    }
    createDefaultWithHttpInfo(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, _options) {
        const result = this.api.createDefaultWithHttpInfo(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, _options);
        return result.toPromise();
    }
    createDefault(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, _options) {
        const result = this.api.createDefault(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, _options);
        return result.toPromise();
    }
    getPageWithHttpInfo(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, _options) {
        const result = this.api.getPageWithHttpInfo(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, _options);
        return result.toPromise();
    }
    getPage(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, _options) {
        const result = this.api.getPage(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, _options);
        return result.toPromise();
    }
}
exports.PromiseBatchApi = PromiseBatchApi;
const ObservableAPI_3 = require("./ObservableAPI");
class PromiseReportApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableReportApi(configuration, requestFactory, responseProcessor);
    }
    requestWithHttpInfo(userId, _options) {
        const result = this.api.requestWithHttpInfo(userId, _options);
        return result.toPromise();
    }
    request(userId, _options) {
        const result = this.api.request(userId, _options);
        return result.toPromise();
    }
}
exports.PromiseReportApi = PromiseReportApi;
//# sourceMappingURL=PromiseAPI.js.map