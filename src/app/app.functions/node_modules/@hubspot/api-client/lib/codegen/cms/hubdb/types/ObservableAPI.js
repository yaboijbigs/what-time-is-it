"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableTablesApi = exports.ObservableRowsBatchApi = exports.ObservableRowsApi = void 0;
const rxjsStub_1 = require("../rxjsStub");
const rxjsStub_2 = require("../rxjsStub");
const RowsApi_1 = require("../apis/RowsApi");
class ObservableRowsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new RowsApi_1.RowsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new RowsApi_1.RowsApiResponseProcessor();
    }
    cloneDraftTableRowWithHttpInfo(tableIdOrName, rowId, name, _options) {
        const requestContextPromise = this.requestFactory.cloneDraftTableRow(tableIdOrName, rowId, name, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.cloneDraftTableRowWithHttpInfo(rsp)));
        }));
    }
    cloneDraftTableRow(tableIdOrName, rowId, name, _options) {
        return this.cloneDraftTableRowWithHttpInfo(tableIdOrName, rowId, name, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    createTableRowWithHttpInfo(tableIdOrName, hubDbTableRowV3Request, _options) {
        const requestContextPromise = this.requestFactory.createTableRow(tableIdOrName, hubDbTableRowV3Request, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createTableRowWithHttpInfo(rsp)));
        }));
    }
    createTableRow(tableIdOrName, hubDbTableRowV3Request, _options) {
        return this.createTableRowWithHttpInfo(tableIdOrName, hubDbTableRowV3Request, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getDraftTableRowByIdWithHttpInfo(tableIdOrName, rowId, archived, _options) {
        const requestContextPromise = this.requestFactory.getDraftTableRowById(tableIdOrName, rowId, archived, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getDraftTableRowByIdWithHttpInfo(rsp)));
        }));
    }
    getDraftTableRowById(tableIdOrName, rowId, archived, _options) {
        return this.getDraftTableRowByIdWithHttpInfo(tableIdOrName, rowId, archived, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getTableRowWithHttpInfo(tableIdOrName, rowId, archived, _options) {
        const requestContextPromise = this.requestFactory.getTableRow(tableIdOrName, rowId, archived, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getTableRowWithHttpInfo(rsp)));
        }));
    }
    getTableRow(tableIdOrName, rowId, archived, _options) {
        return this.getTableRowWithHttpInfo(tableIdOrName, rowId, archived, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getTableRowsWithHttpInfo(tableIdOrName, sort, after, limit, properties, offset, archived, _options) {
        const requestContextPromise = this.requestFactory.getTableRows(tableIdOrName, sort, after, limit, properties, offset, archived, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getTableRowsWithHttpInfo(rsp)));
        }));
    }
    getTableRows(tableIdOrName, sort, after, limit, properties, offset, archived, _options) {
        return this.getTableRowsWithHttpInfo(tableIdOrName, sort, after, limit, properties, offset, archived, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    purgeDraftTableRowWithHttpInfo(tableIdOrName, rowId, _options) {
        const requestContextPromise = this.requestFactory.purgeDraftTableRow(tableIdOrName, rowId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.purgeDraftTableRowWithHttpInfo(rsp)));
        }));
    }
    purgeDraftTableRow(tableIdOrName, rowId, _options) {
        return this.purgeDraftTableRowWithHttpInfo(tableIdOrName, rowId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    readDraftTableRowsWithHttpInfo(tableIdOrName, sort, after, limit, properties, offset, archived, _options) {
        const requestContextPromise = this.requestFactory.readDraftTableRows(tableIdOrName, sort, after, limit, properties, offset, archived, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.readDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    readDraftTableRows(tableIdOrName, sort, after, limit, properties, offset, archived, _options) {
        return this.readDraftTableRowsWithHttpInfo(tableIdOrName, sort, after, limit, properties, offset, archived, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    replaceDraftTableRowWithHttpInfo(tableIdOrName, rowId, hubDbTableRowV3Request, _options) {
        const requestContextPromise = this.requestFactory.replaceDraftTableRow(tableIdOrName, rowId, hubDbTableRowV3Request, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.replaceDraftTableRowWithHttpInfo(rsp)));
        }));
    }
    replaceDraftTableRow(tableIdOrName, rowId, hubDbTableRowV3Request, _options) {
        return this.replaceDraftTableRowWithHttpInfo(tableIdOrName, rowId, hubDbTableRowV3Request, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    updateDraftTableRowWithHttpInfo(tableIdOrName, rowId, hubDbTableRowV3Request, _options) {
        const requestContextPromise = this.requestFactory.updateDraftTableRow(tableIdOrName, rowId, hubDbTableRowV3Request, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.updateDraftTableRowWithHttpInfo(rsp)));
        }));
    }
    updateDraftTableRow(tableIdOrName, rowId, hubDbTableRowV3Request, _options) {
        return this.updateDraftTableRowWithHttpInfo(tableIdOrName, rowId, hubDbTableRowV3Request, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableRowsApi = ObservableRowsApi;
const RowsBatchApi_1 = require("../apis/RowsBatchApi");
class ObservableRowsBatchApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new RowsBatchApi_1.RowsBatchApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new RowsBatchApi_1.RowsBatchApiResponseProcessor();
    }
    cloneDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowBatchCloneRequest, _options) {
        const requestContextPromise = this.requestFactory.cloneDraftTableRows(tableIdOrName, batchInputHubDbTableRowBatchCloneRequest, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.cloneDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    cloneDraftTableRows(tableIdOrName, batchInputHubDbTableRowBatchCloneRequest, _options) {
        return this.cloneDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowBatchCloneRequest, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    createDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3Request, _options) {
        const requestContextPromise = this.requestFactory.createDraftTableRows(tableIdOrName, batchInputHubDbTableRowV3Request, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    createDraftTableRows(tableIdOrName, batchInputHubDbTableRowV3Request, _options) {
        return this.createDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3Request, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    purgeDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString, _options) {
        const requestContextPromise = this.requestFactory.purgeDraftTableRows(tableIdOrName, batchInputString, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.purgeDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    purgeDraftTableRows(tableIdOrName, batchInputString, _options) {
        return this.purgeDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    readDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString, _options) {
        const requestContextPromise = this.requestFactory.readDraftTableRows(tableIdOrName, batchInputString, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.readDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    readDraftTableRows(tableIdOrName, batchInputString, _options) {
        return this.readDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    readTableRowsWithHttpInfo(tableIdOrName, batchInputString, _options) {
        const requestContextPromise = this.requestFactory.readTableRows(tableIdOrName, batchInputString, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.readTableRowsWithHttpInfo(rsp)));
        }));
    }
    readTableRows(tableIdOrName, batchInputString, _options) {
        return this.readTableRowsWithHttpInfo(tableIdOrName, batchInputString, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    replaceDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options) {
        const requestContextPromise = this.requestFactory.replaceDraftTableRows(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.replaceDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    replaceDraftTableRows(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options) {
        return this.replaceDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    updateDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options) {
        const requestContextPromise = this.requestFactory.updateDraftTableRows(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.updateDraftTableRowsWithHttpInfo(rsp)));
        }));
    }
    updateDraftTableRows(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options) {
        return this.updateDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableRowsBatchApi = ObservableRowsBatchApi;
const TablesApi_1 = require("../apis/TablesApi");
class ObservableTablesApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new TablesApi_1.TablesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new TablesApi_1.TablesApiResponseProcessor();
    }
    archiveTableWithHttpInfo(tableIdOrName, _options) {
        const requestContextPromise = this.requestFactory.archiveTable(tableIdOrName, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.archiveTableWithHttpInfo(rsp)));
        }));
    }
    archiveTable(tableIdOrName, _options) {
        return this.archiveTableWithHttpInfo(tableIdOrName, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    cloneDraftTableWithHttpInfo(tableIdOrName, hubDbTableCloneRequest, _options) {
        const requestContextPromise = this.requestFactory.cloneDraftTable(tableIdOrName, hubDbTableCloneRequest, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.cloneDraftTableWithHttpInfo(rsp)));
        }));
    }
    cloneDraftTable(tableIdOrName, hubDbTableCloneRequest, _options) {
        return this.cloneDraftTableWithHttpInfo(tableIdOrName, hubDbTableCloneRequest, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    createTableWithHttpInfo(hubDbTableV3Request, _options) {
        const requestContextPromise = this.requestFactory.createTable(hubDbTableV3Request, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createTableWithHttpInfo(rsp)));
        }));
    }
    createTable(hubDbTableV3Request, _options) {
        return this.createTableWithHttpInfo(hubDbTableV3Request, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    exportDraftTableWithHttpInfo(tableIdOrName, format, _options) {
        const requestContextPromise = this.requestFactory.exportDraftTable(tableIdOrName, format, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.exportDraftTableWithHttpInfo(rsp)));
        }));
    }
    exportDraftTable(tableIdOrName, format, _options) {
        return this.exportDraftTableWithHttpInfo(tableIdOrName, format, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    exportTableWithHttpInfo(tableIdOrName, format, _options) {
        const requestContextPromise = this.requestFactory.exportTable(tableIdOrName, format, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.exportTableWithHttpInfo(rsp)));
        }));
    }
    exportTable(tableIdOrName, format, _options) {
        return this.exportTableWithHttpInfo(tableIdOrName, format, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getAllDraftTablesWithHttpInfo(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options) {
        const requestContextPromise = this.requestFactory.getAllDraftTables(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getAllDraftTablesWithHttpInfo(rsp)));
        }));
    }
    getAllDraftTables(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options) {
        return this.getAllDraftTablesWithHttpInfo(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getAllTablesWithHttpInfo(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options) {
        const requestContextPromise = this.requestFactory.getAllTables(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getAllTablesWithHttpInfo(rsp)));
        }));
    }
    getAllTables(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options) {
        return this.getAllTablesWithHttpInfo(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, contentType, archived, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getDraftTableDetailsByIdWithHttpInfo(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options) {
        const requestContextPromise = this.requestFactory.getDraftTableDetailsById(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getDraftTableDetailsByIdWithHttpInfo(rsp)));
        }));
    }
    getDraftTableDetailsById(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options) {
        return this.getDraftTableDetailsByIdWithHttpInfo(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getTableDetailsWithHttpInfo(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options) {
        const requestContextPromise = this.requestFactory.getTableDetails(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getTableDetailsWithHttpInfo(rsp)));
        }));
    }
    getTableDetails(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options) {
        return this.getTableDetailsWithHttpInfo(tableIdOrName, isGetLocalizedSchema, archived, includeForeignIds, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    importDraftTableWithHttpInfo(tableIdOrName, config, file, _options) {
        const requestContextPromise = this.requestFactory.importDraftTable(tableIdOrName, config, file, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.importDraftTableWithHttpInfo(rsp)));
        }));
    }
    importDraftTable(tableIdOrName, config, file, _options) {
        return this.importDraftTableWithHttpInfo(tableIdOrName, config, file, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    publishDraftTableWithHttpInfo(tableIdOrName, includeForeignIds, _options) {
        const requestContextPromise = this.requestFactory.publishDraftTable(tableIdOrName, includeForeignIds, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.publishDraftTableWithHttpInfo(rsp)));
        }));
    }
    publishDraftTable(tableIdOrName, includeForeignIds, _options) {
        return this.publishDraftTableWithHttpInfo(tableIdOrName, includeForeignIds, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    resetDraftTableWithHttpInfo(tableIdOrName, includeForeignIds, _options) {
        const requestContextPromise = this.requestFactory.resetDraftTable(tableIdOrName, includeForeignIds, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.resetDraftTableWithHttpInfo(rsp)));
        }));
    }
    resetDraftTable(tableIdOrName, includeForeignIds, _options) {
        return this.resetDraftTableWithHttpInfo(tableIdOrName, includeForeignIds, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    unpublishTableWithHttpInfo(tableIdOrName, includeForeignIds, _options) {
        const requestContextPromise = this.requestFactory.unpublishTable(tableIdOrName, includeForeignIds, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.unpublishTableWithHttpInfo(rsp)));
        }));
    }
    unpublishTable(tableIdOrName, includeForeignIds, _options) {
        return this.unpublishTableWithHttpInfo(tableIdOrName, includeForeignIds, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    updateDraftTableWithHttpInfo(tableIdOrName, hubDbTableV3Request, isGetLocalizedSchema, archived, includeForeignIds, _options) {
        const requestContextPromise = this.requestFactory.updateDraftTable(tableIdOrName, hubDbTableV3Request, isGetLocalizedSchema, archived, includeForeignIds, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (let middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (let middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.updateDraftTableWithHttpInfo(rsp)));
        }));
    }
    updateDraftTable(tableIdOrName, hubDbTableV3Request, isGetLocalizedSchema, archived, includeForeignIds, _options) {
        return this.updateDraftTableWithHttpInfo(tableIdOrName, hubDbTableV3Request, isGetLocalizedSchema, archived, includeForeignIds, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableTablesApi = ObservableTablesApi;
//# sourceMappingURL=ObservableAPI.js.map