"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseSettingsApi = exports.PromiseRecordingSettingsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseRecordingSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableRecordingSettingsApi(configuration, requestFactory, responseProcessor);
    }
    getUrlFormatWithHttpInfo(appId, _options) {
        const result = this.api.getUrlFormatWithHttpInfo(appId, _options);
        return result.toPromise();
    }
    getUrlFormat(appId, _options) {
        const result = this.api.getUrlFormat(appId, _options);
        return result.toPromise();
    }
    markAsReadyWithHttpInfo(markRecordingAsReadyRequest, _options) {
        const result = this.api.markAsReadyWithHttpInfo(markRecordingAsReadyRequest, _options);
        return result.toPromise();
    }
    markAsReady(markRecordingAsReadyRequest, _options) {
        const result = this.api.markAsReady(markRecordingAsReadyRequest, _options);
        return result.toPromise();
    }
    registerUrlFormatWithHttpInfo(appId, recordingSettingsRequest, _options) {
        const result = this.api.registerUrlFormatWithHttpInfo(appId, recordingSettingsRequest, _options);
        return result.toPromise();
    }
    registerUrlFormat(appId, recordingSettingsRequest, _options) {
        const result = this.api.registerUrlFormat(appId, recordingSettingsRequest, _options);
        return result.toPromise();
    }
    updateUrlFormatWithHttpInfo(appId, recordingSettingsPatchRequest, _options) {
        const result = this.api.updateUrlFormatWithHttpInfo(appId, recordingSettingsPatchRequest, _options);
        return result.toPromise();
    }
    updateUrlFormat(appId, recordingSettingsPatchRequest, _options) {
        const result = this.api.updateUrlFormat(appId, recordingSettingsPatchRequest, _options);
        return result.toPromise();
    }
}
exports.PromiseRecordingSettingsApi = PromiseRecordingSettingsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableSettingsApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(appId, _options) {
        const result = this.api.archiveWithHttpInfo(appId, _options);
        return result.toPromise();
    }
    archive(appId, _options) {
        const result = this.api.archive(appId, _options);
        return result.toPromise();
    }
    createWithHttpInfo(appId, settingsRequest, _options) {
        const result = this.api.createWithHttpInfo(appId, settingsRequest, _options);
        return result.toPromise();
    }
    create(appId, settingsRequest, _options) {
        const result = this.api.create(appId, settingsRequest, _options);
        return result.toPromise();
    }
    getByIdWithHttpInfo(appId, _options) {
        const result = this.api.getByIdWithHttpInfo(appId, _options);
        return result.toPromise();
    }
    getById(appId, _options) {
        const result = this.api.getById(appId, _options);
        return result.toPromise();
    }
    updateWithHttpInfo(appId, settingsPatchRequest, _options) {
        const result = this.api.updateWithHttpInfo(appId, settingsPatchRequest, _options);
        return result.toPromise();
    }
    update(appId, settingsPatchRequest, _options) {
        const result = this.api.update(appId, settingsPatchRequest, _options);
        return result.toPromise();
    }
}
exports.PromiseSettingsApi = PromiseSettingsApi;
//# sourceMappingURL=PromiseAPI.js.map