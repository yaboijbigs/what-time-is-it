import { HttpFile, HttpInfo } from '../http/http';
import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { BatchInputHubDbTableRowBatchCloneRequest } from '../models/BatchInputHubDbTableRowBatchCloneRequest';
import { BatchInputHubDbTableRowV3BatchUpdateRequest } from '../models/BatchInputHubDbTableRowV3BatchUpdateRequest';
import { BatchInputHubDbTableRowV3Request } from '../models/BatchInputHubDbTableRowV3Request';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseHubDbTableRowV3 } from '../models/BatchResponseHubDbTableRowV3';
import { BatchResponseHubDbTableRowV3WithErrors } from '../models/BatchResponseHubDbTableRowV3WithErrors';
import { CollectionResponseWithTotalHubDbTableV3ForwardPaging } from '../models/CollectionResponseWithTotalHubDbTableV3ForwardPaging';
import { HubDbTableCloneRequest } from '../models/HubDbTableCloneRequest';
import { HubDbTableRowV3 } from '../models/HubDbTableRowV3';
import { HubDbTableRowV3Request } from '../models/HubDbTableRowV3Request';
import { HubDbTableV3 } from '../models/HubDbTableV3';
import { HubDbTableV3Request } from '../models/HubDbTableV3Request';
import { ImportResult } from '../models/ImportResult';
import { UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3 } from '../models/UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3';
import { RowsApiRequestFactory, RowsApiResponseProcessor } from "../apis/RowsApi";
export declare class ObservableRowsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RowsApiRequestFactory, responseProcessor?: RowsApiResponseProcessor);
    cloneDraftTableRowWithHttpInfo(tableIdOrName: string, rowId: string, name?: string, _options?: Configuration): Observable<HttpInfo<HubDbTableRowV3>>;
    cloneDraftTableRow(tableIdOrName: string, rowId: string, name?: string, _options?: Configuration): Observable<HubDbTableRowV3>;
    createTableRowWithHttpInfo(tableIdOrName: string, hubDbTableRowV3Request: HubDbTableRowV3Request, _options?: Configuration): Observable<HttpInfo<HubDbTableRowV3>>;
    createTableRow(tableIdOrName: string, hubDbTableRowV3Request: HubDbTableRowV3Request, _options?: Configuration): Observable<HubDbTableRowV3>;
    getDraftTableRowByIdWithHttpInfo(tableIdOrName: string, rowId: string, archived?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableRowV3>>;
    getDraftTableRowById(tableIdOrName: string, rowId: string, archived?: boolean, _options?: Configuration): Observable<HubDbTableRowV3>;
    getTableRowWithHttpInfo(tableIdOrName: string, rowId: string, archived?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableRowV3>>;
    getTableRow(tableIdOrName: string, rowId: string, archived?: boolean, _options?: Configuration): Observable<HubDbTableRowV3>;
    getTableRowsWithHttpInfo(tableIdOrName: string, sort?: Array<string>, after?: string, limit?: number, properties?: Array<string>, offset?: number, archived?: boolean, _options?: Configuration): Observable<HttpInfo<UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3>>;
    getTableRows(tableIdOrName: string, sort?: Array<string>, after?: string, limit?: number, properties?: Array<string>, offset?: number, archived?: boolean, _options?: Configuration): Observable<UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3>;
    purgeDraftTableRowWithHttpInfo(tableIdOrName: string, rowId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    purgeDraftTableRow(tableIdOrName: string, rowId: string, _options?: Configuration): Observable<void>;
    readDraftTableRowsWithHttpInfo(tableIdOrName: string, sort?: Array<string>, after?: string, limit?: number, properties?: Array<string>, offset?: number, archived?: boolean, _options?: Configuration): Observable<HttpInfo<UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3>>;
    readDraftTableRows(tableIdOrName: string, sort?: Array<string>, after?: string, limit?: number, properties?: Array<string>, offset?: number, archived?: boolean, _options?: Configuration): Observable<UnifiedCollectionResponseWithTotalBaseHubDbTableRowV3>;
    replaceDraftTableRowWithHttpInfo(tableIdOrName: string, rowId: string, hubDbTableRowV3Request: HubDbTableRowV3Request, _options?: Configuration): Observable<HttpInfo<HubDbTableRowV3>>;
    replaceDraftTableRow(tableIdOrName: string, rowId: string, hubDbTableRowV3Request: HubDbTableRowV3Request, _options?: Configuration): Observable<HubDbTableRowV3>;
    updateDraftTableRowWithHttpInfo(tableIdOrName: string, rowId: string, hubDbTableRowV3Request: HubDbTableRowV3Request, _options?: Configuration): Observable<HttpInfo<HubDbTableRowV3>>;
    updateDraftTableRow(tableIdOrName: string, rowId: string, hubDbTableRowV3Request: HubDbTableRowV3Request, _options?: Configuration): Observable<HubDbTableRowV3>;
}
import { RowsBatchApiRequestFactory, RowsBatchApiResponseProcessor } from "../apis/RowsBatchApi";
export declare class ObservableRowsBatchApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RowsBatchApiRequestFactory, responseProcessor?: RowsBatchApiResponseProcessor);
    cloneDraftTableRowsWithHttpInfo(tableIdOrName: string, batchInputHubDbTableRowBatchCloneRequest: BatchInputHubDbTableRowBatchCloneRequest, _options?: Configuration): Observable<HttpInfo<BatchResponseHubDbTableRowV3>>;
    cloneDraftTableRows(tableIdOrName: string, batchInputHubDbTableRowBatchCloneRequest: BatchInputHubDbTableRowBatchCloneRequest, _options?: Configuration): Observable<BatchResponseHubDbTableRowV3>;
    createDraftTableRowsWithHttpInfo(tableIdOrName: string, batchInputHubDbTableRowV3Request: BatchInputHubDbTableRowV3Request, _options?: Configuration): Observable<HttpInfo<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>>;
    createDraftTableRows(tableIdOrName: string, batchInputHubDbTableRowV3Request: BatchInputHubDbTableRowV3Request, _options?: Configuration): Observable<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>;
    purgeDraftTableRowsWithHttpInfo(tableIdOrName: string, batchInputString: BatchInputString, _options?: Configuration): Observable<HttpInfo<void>>;
    purgeDraftTableRows(tableIdOrName: string, batchInputString: BatchInputString, _options?: Configuration): Observable<void>;
    readDraftTableRowsWithHttpInfo(tableIdOrName: string, batchInputString: BatchInputString, _options?: Configuration): Observable<HttpInfo<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>>;
    readDraftTableRows(tableIdOrName: string, batchInputString: BatchInputString, _options?: Configuration): Observable<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>;
    readTableRowsWithHttpInfo(tableIdOrName: string, batchInputString: BatchInputString, _options?: Configuration): Observable<HttpInfo<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>>;
    readTableRows(tableIdOrName: string, batchInputString: BatchInputString, _options?: Configuration): Observable<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>;
    replaceDraftTableRowsWithHttpInfo(tableIdOrName: string, batchInputHubDbTableRowV3BatchUpdateRequest: BatchInputHubDbTableRowV3BatchUpdateRequest, _options?: Configuration): Observable<HttpInfo<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>>;
    replaceDraftTableRows(tableIdOrName: string, batchInputHubDbTableRowV3BatchUpdateRequest: BatchInputHubDbTableRowV3BatchUpdateRequest, _options?: Configuration): Observable<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>;
    updateDraftTableRowsWithHttpInfo(tableIdOrName: string, batchInputHubDbTableRowV3BatchUpdateRequest: BatchInputHubDbTableRowV3BatchUpdateRequest, _options?: Configuration): Observable<HttpInfo<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>>;
    updateDraftTableRows(tableIdOrName: string, batchInputHubDbTableRowV3BatchUpdateRequest: BatchInputHubDbTableRowV3BatchUpdateRequest, _options?: Configuration): Observable<BatchResponseHubDbTableRowV3 | BatchResponseHubDbTableRowV3WithErrors>;
}
import { TablesApiRequestFactory, TablesApiResponseProcessor } from "../apis/TablesApi";
export declare class ObservableTablesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TablesApiRequestFactory, responseProcessor?: TablesApiResponseProcessor);
    archiveTableWithHttpInfo(tableIdOrName: string, _options?: Configuration): Observable<HttpInfo<void>>;
    archiveTable(tableIdOrName: string, _options?: Configuration): Observable<void>;
    cloneDraftTableWithHttpInfo(tableIdOrName: string, hubDbTableCloneRequest: HubDbTableCloneRequest, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    cloneDraftTable(tableIdOrName: string, hubDbTableCloneRequest: HubDbTableCloneRequest, _options?: Configuration): Observable<HubDbTableV3>;
    createTableWithHttpInfo(hubDbTableV3Request: HubDbTableV3Request, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    createTable(hubDbTableV3Request: HubDbTableV3Request, _options?: Configuration): Observable<HubDbTableV3>;
    exportDraftTableWithHttpInfo(tableIdOrName: string, format?: string, _options?: Configuration): Observable<HttpInfo<HttpFile>>;
    exportDraftTable(tableIdOrName: string, format?: string, _options?: Configuration): Observable<HttpFile>;
    exportTableWithHttpInfo(tableIdOrName: string, format?: string, _options?: Configuration): Observable<HttpInfo<HttpFile>>;
    exportTable(tableIdOrName: string, format?: string, _options?: Configuration): Observable<HttpFile>;
    getAllDraftTablesWithHttpInfo(sort?: Array<string>, after?: string, limit?: number, createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, contentType?: string, archived?: boolean, _options?: Configuration): Observable<HttpInfo<CollectionResponseWithTotalHubDbTableV3ForwardPaging>>;
    getAllDraftTables(sort?: Array<string>, after?: string, limit?: number, createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, contentType?: string, archived?: boolean, _options?: Configuration): Observable<CollectionResponseWithTotalHubDbTableV3ForwardPaging>;
    getAllTablesWithHttpInfo(sort?: Array<string>, after?: string, limit?: number, createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, contentType?: string, archived?: boolean, _options?: Configuration): Observable<HttpInfo<CollectionResponseWithTotalHubDbTableV3ForwardPaging>>;
    getAllTables(sort?: Array<string>, after?: string, limit?: number, createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, contentType?: string, archived?: boolean, _options?: Configuration): Observable<CollectionResponseWithTotalHubDbTableV3ForwardPaging>;
    getDraftTableDetailsByIdWithHttpInfo(tableIdOrName: string, isGetLocalizedSchema?: boolean, archived?: boolean, includeForeignIds?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    getDraftTableDetailsById(tableIdOrName: string, isGetLocalizedSchema?: boolean, archived?: boolean, includeForeignIds?: boolean, _options?: Configuration): Observable<HubDbTableV3>;
    getTableDetailsWithHttpInfo(tableIdOrName: string, isGetLocalizedSchema?: boolean, archived?: boolean, includeForeignIds?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    getTableDetails(tableIdOrName: string, isGetLocalizedSchema?: boolean, archived?: boolean, includeForeignIds?: boolean, _options?: Configuration): Observable<HubDbTableV3>;
    importDraftTableWithHttpInfo(tableIdOrName: string, config?: string, file?: HttpFile, _options?: Configuration): Observable<HttpInfo<ImportResult>>;
    importDraftTable(tableIdOrName: string, config?: string, file?: HttpFile, _options?: Configuration): Observable<ImportResult>;
    publishDraftTableWithHttpInfo(tableIdOrName: string, includeForeignIds?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    publishDraftTable(tableIdOrName: string, includeForeignIds?: boolean, _options?: Configuration): Observable<HubDbTableV3>;
    resetDraftTableWithHttpInfo(tableIdOrName: string, includeForeignIds?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    resetDraftTable(tableIdOrName: string, includeForeignIds?: boolean, _options?: Configuration): Observable<HubDbTableV3>;
    unpublishTableWithHttpInfo(tableIdOrName: string, includeForeignIds?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    unpublishTable(tableIdOrName: string, includeForeignIds?: boolean, _options?: Configuration): Observable<HubDbTableV3>;
    updateDraftTableWithHttpInfo(tableIdOrName: string, hubDbTableV3Request: HubDbTableV3Request, isGetLocalizedSchema?: boolean, archived?: boolean, includeForeignIds?: boolean, _options?: Configuration): Observable<HttpInfo<HubDbTableV3>>;
    updateDraftTable(tableIdOrName: string, hubDbTableV3Request: HubDbTableV3Request, isGetLocalizedSchema?: boolean, archived?: boolean, includeForeignIds?: boolean, _options?: Configuration): Observable<HubDbTableV3>;
}
