import { HttpInfo } from '../http/http';
import { Configuration } from '../configuration';
import { AbTestCreateRequestVNext } from '../models/AbTestCreateRequestVNext';
import { AbTestEndRequestVNext } from '../models/AbTestEndRequestVNext';
import { AbTestRerunRequestVNext } from '../models/AbTestRerunRequestVNext';
import { AttachToLangPrimaryRequestVNext } from '../models/AttachToLangPrimaryRequestVNext';
import { BatchInputContentFolder } from '../models/BatchInputContentFolder';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputPage } from '../models/BatchInputPage';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseContentFolder } from '../models/BatchResponseContentFolder';
import { BatchResponseContentFolderWithErrors } from '../models/BatchResponseContentFolderWithErrors';
import { BatchResponsePage } from '../models/BatchResponsePage';
import { BatchResponsePageWithErrors } from '../models/BatchResponsePageWithErrors';
import { CollectionResponseWithTotalContentFolderForwardPaging } from '../models/CollectionResponseWithTotalContentFolderForwardPaging';
import { CollectionResponseWithTotalPageForwardPaging } from '../models/CollectionResponseWithTotalPageForwardPaging';
import { CollectionResponseWithTotalVersionContentFolder } from '../models/CollectionResponseWithTotalVersionContentFolder';
import { CollectionResponseWithTotalVersionPage } from '../models/CollectionResponseWithTotalVersionPage';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentFolder } from '../models/ContentFolder';
import { ContentLanguageCloneRequestVNext } from '../models/ContentLanguageCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { DetachFromLangGroupRequestVNext } from '../models/DetachFromLangGroupRequestVNext';
import { Page } from '../models/Page';
import { SetNewLanguagePrimaryRequestVNext } from '../models/SetNewLanguagePrimaryRequestVNext';
import { UpdateLanguagesRequestVNext } from '../models/UpdateLanguagesRequestVNext';
import { VersionContentFolder } from '../models/VersionContentFolder';
import { VersionPage } from '../models/VersionPage';
import { LandingPagesApiRequestFactory, LandingPagesApiResponseProcessor } from "../apis/LandingPagesApi";
export declare class PromiseLandingPagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LandingPagesApiRequestFactory, responseProcessor?: LandingPagesApiResponseProcessor);
    archiveWithHttpInfo(objectId: string, archived?: boolean, _options?: Configuration): Promise<HttpInfo<void>>;
    archive(objectId: string, archived?: boolean, _options?: Configuration): Promise<void>;
    archiveBatchWithHttpInfo(batchInputString: BatchInputString, _options?: Configuration): Promise<HttpInfo<void>>;
    archiveBatch(batchInputString: BatchInputString, _options?: Configuration): Promise<void>;
    archiveFolderWithHttpInfo(objectId: string, archived?: boolean, _options?: Configuration): Promise<HttpInfo<void>>;
    archiveFolder(objectId: string, archived?: boolean, _options?: Configuration): Promise<void>;
    archiveFoldersWithHttpInfo(batchInputString: BatchInputString, _options?: Configuration): Promise<HttpInfo<void>>;
    archiveFolders(batchInputString: BatchInputString, _options?: Configuration): Promise<void>;
    attachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    attachToLangGroup(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: Configuration): Promise<void>;
    cloneWithHttpInfo(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Promise<HttpInfo<Page>>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Promise<Page>;
    createWithHttpInfo(page: Page, _options?: Configuration): Promise<HttpInfo<void | Page>>;
    create(page: Page, _options?: Configuration): Promise<void | Page>;
    createABTestVariationWithHttpInfo(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: Configuration): Promise<HttpInfo<Page>>;
    createABTestVariation(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: Configuration): Promise<Page>;
    createBatchWithHttpInfo(batchInputPage: BatchInputPage, _options?: Configuration): Promise<HttpInfo<BatchResponsePage | BatchResponsePageWithErrors>>;
    createBatch(batchInputPage: BatchInputPage, _options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    createFolderWithHttpInfo(contentFolder: ContentFolder, _options?: Configuration): Promise<HttpInfo<ContentFolder>>;
    createFolder(contentFolder: ContentFolder, _options?: Configuration): Promise<ContentFolder>;
    createFoldersWithHttpInfo(batchInputContentFolder: BatchInputContentFolder, _options?: Configuration): Promise<HttpInfo<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>>;
    createFolders(batchInputContentFolder: BatchInputContentFolder, _options?: Configuration): Promise<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>;
    createLangVariationWithHttpInfo(contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext, _options?: Configuration): Promise<HttpInfo<Page>>;
    createLangVariation(contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext, _options?: Configuration): Promise<Page>;
    detachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    detachFromLangGroup(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: Configuration): Promise<void>;
    endActiveABTestWithHttpInfo(abTestEndRequestVNext: AbTestEndRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    endActiveABTest(abTestEndRequestVNext: AbTestEndRequestVNext, _options?: Configuration): Promise<void>;
    getByIdWithHttpInfo(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<HttpInfo<Page>>;
    getById(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<Page>;
    getDraftByIdWithHttpInfo(objectId: string, _options?: Configuration): Promise<HttpInfo<Page>>;
    getDraftById(objectId: string, _options?: Configuration): Promise<Page>;
    getFolderByIdWithHttpInfo(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<HttpInfo<ContentFolder>>;
    getFolderById(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<ContentFolder>;
    getFolderPreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: Configuration): Promise<HttpInfo<VersionContentFolder>>;
    getFolderPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<VersionContentFolder>;
    getFolderPreviousVersionsWithHttpInfo(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<HttpInfo<CollectionResponseWithTotalVersionContentFolder>>;
    getFolderPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<CollectionResponseWithTotalVersionContentFolder>;
    getFoldersPageWithHttpInfo(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<HttpInfo<CollectionResponseWithTotalContentFolderForwardPaging>>;
    getFoldersPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<CollectionResponseWithTotalContentFolderForwardPaging>;
    getPageWithHttpInfo(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<HttpInfo<CollectionResponseWithTotalPageForwardPaging>>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<CollectionResponseWithTotalPageForwardPaging>;
    getPreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: Configuration): Promise<HttpInfo<VersionPage>>;
    getPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<VersionPage>;
    getPreviousVersionsWithHttpInfo(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<HttpInfo<CollectionResponseWithTotalVersionPage>>;
    getPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<CollectionResponseWithTotalVersionPage>;
    pushLiveWithHttpInfo(objectId: string, _options?: Configuration): Promise<HttpInfo<void>>;
    pushLive(objectId: string, _options?: Configuration): Promise<void>;
    readBatchWithHttpInfo(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<HttpInfo<BatchResponsePage | BatchResponsePageWithErrors>>;
    readBatch(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    readFoldersWithHttpInfo(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<HttpInfo<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>>;
    readFolders(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>;
    rerunPreviousABTestWithHttpInfo(abTestRerunRequestVNext: AbTestRerunRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    rerunPreviousABTest(abTestRerunRequestVNext: AbTestRerunRequestVNext, _options?: Configuration): Promise<void>;
    resetDraftWithHttpInfo(objectId: string, _options?: Configuration): Promise<HttpInfo<void>>;
    resetDraft(objectId: string, _options?: Configuration): Promise<void>;
    restoreFolderPreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: Configuration): Promise<HttpInfo<ContentFolder>>;
    restoreFolderPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<ContentFolder>;
    restorePreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: Configuration): Promise<HttpInfo<Page>>;
    restorePreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<Page>;
    restorePreviousVersionToDraftWithHttpInfo(objectId: string, revisionId: number, _options?: Configuration): Promise<HttpInfo<Page>>;
    restorePreviousVersionToDraft(objectId: string, revisionId: number, _options?: Configuration): Promise<Page>;
    scheduleWithHttpInfo(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    schedule(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Promise<void>;
    setLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    setLangPrimary(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: Configuration): Promise<void>;
    updateWithHttpInfo(objectId: string, page: Page, archived?: boolean, _options?: Configuration): Promise<HttpInfo<Page>>;
    update(objectId: string, page: Page, archived?: boolean, _options?: Configuration): Promise<Page>;
    updateBatchWithHttpInfo(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<HttpInfo<BatchResponsePage | BatchResponsePageWithErrors>>;
    updateBatch(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    updateDraftWithHttpInfo(objectId: string, page: Page, _options?: Configuration): Promise<HttpInfo<Page>>;
    updateDraft(objectId: string, page: Page, _options?: Configuration): Promise<Page>;
    updateFolderWithHttpInfo(objectId: string, contentFolder: ContentFolder, archived?: boolean, _options?: Configuration): Promise<HttpInfo<ContentFolder>>;
    updateFolder(objectId: string, contentFolder: ContentFolder, archived?: boolean, _options?: Configuration): Promise<ContentFolder>;
    updateFoldersWithHttpInfo(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<HttpInfo<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>>;
    updateFolders(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<BatchResponseContentFolder | BatchResponseContentFolderWithErrors>;
    updateLangsWithHttpInfo(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    updateLangs(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: Configuration): Promise<void>;
}
import { SitePagesApiRequestFactory, SitePagesApiResponseProcessor } from "../apis/SitePagesApi";
export declare class PromiseSitePagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SitePagesApiRequestFactory, responseProcessor?: SitePagesApiResponseProcessor);
    archiveWithHttpInfo(objectId: string, archived?: boolean, _options?: Configuration): Promise<HttpInfo<void>>;
    archive(objectId: string, archived?: boolean, _options?: Configuration): Promise<void>;
    archiveBatchWithHttpInfo(batchInputString: BatchInputString, _options?: Configuration): Promise<HttpInfo<void>>;
    archiveBatch(batchInputString: BatchInputString, _options?: Configuration): Promise<void>;
    attachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    attachToLangGroup(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: Configuration): Promise<void>;
    cloneWithHttpInfo(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Promise<HttpInfo<Page>>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Promise<Page>;
    createWithHttpInfo(page: Page, _options?: Configuration): Promise<HttpInfo<void | Page>>;
    create(page: Page, _options?: Configuration): Promise<void | Page>;
    createABTestVariationWithHttpInfo(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: Configuration): Promise<HttpInfo<Page>>;
    createABTestVariation(abTestCreateRequestVNext: AbTestCreateRequestVNext, _options?: Configuration): Promise<Page>;
    createBatchWithHttpInfo(batchInputPage: BatchInputPage, _options?: Configuration): Promise<HttpInfo<BatchResponsePage | BatchResponsePageWithErrors>>;
    createBatch(batchInputPage: BatchInputPage, _options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    createLangVariationWithHttpInfo(contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext, _options?: Configuration): Promise<HttpInfo<Page>>;
    createLangVariation(contentLanguageCloneRequestVNext: ContentLanguageCloneRequestVNext, _options?: Configuration): Promise<Page>;
    detachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    detachFromLangGroup(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: Configuration): Promise<void>;
    endActiveABTestWithHttpInfo(abTestEndRequestVNext: AbTestEndRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    endActiveABTest(abTestEndRequestVNext: AbTestEndRequestVNext, _options?: Configuration): Promise<void>;
    getByIdWithHttpInfo(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<HttpInfo<Page>>;
    getById(objectId: string, archived?: boolean, property?: string, _options?: Configuration): Promise<Page>;
    getDraftByIdWithHttpInfo(objectId: string, _options?: Configuration): Promise<HttpInfo<Page>>;
    getDraftById(objectId: string, _options?: Configuration): Promise<Page>;
    getPageWithHttpInfo(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<HttpInfo<CollectionResponseWithTotalPageForwardPaging>>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, property?: string, _options?: Configuration): Promise<CollectionResponseWithTotalPageForwardPaging>;
    getPreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: Configuration): Promise<HttpInfo<VersionPage>>;
    getPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<VersionPage>;
    getPreviousVersionsWithHttpInfo(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<HttpInfo<CollectionResponseWithTotalVersionPage>>;
    getPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<CollectionResponseWithTotalVersionPage>;
    pushLiveWithHttpInfo(objectId: string, _options?: Configuration): Promise<HttpInfo<void>>;
    pushLive(objectId: string, _options?: Configuration): Promise<void>;
    readBatchWithHttpInfo(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<HttpInfo<BatchResponsePage | BatchResponsePageWithErrors>>;
    readBatch(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    rerunPreviousABTestWithHttpInfo(abTestRerunRequestVNext: AbTestRerunRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    rerunPreviousABTest(abTestRerunRequestVNext: AbTestRerunRequestVNext, _options?: Configuration): Promise<void>;
    resetDraftWithHttpInfo(objectId: string, _options?: Configuration): Promise<HttpInfo<void>>;
    resetDraft(objectId: string, _options?: Configuration): Promise<void>;
    restorePreviousVersionWithHttpInfo(objectId: string, revisionId: string, _options?: Configuration): Promise<HttpInfo<Page>>;
    restorePreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Promise<Page>;
    restorePreviousVersionToDraftWithHttpInfo(objectId: string, revisionId: number, _options?: Configuration): Promise<HttpInfo<Page>>;
    restorePreviousVersionToDraft(objectId: string, revisionId: number, _options?: Configuration): Promise<Page>;
    scheduleWithHttpInfo(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    schedule(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Promise<void>;
    setLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    setLangPrimary(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: Configuration): Promise<void>;
    updateWithHttpInfo(objectId: string, page: Page, archived?: boolean, _options?: Configuration): Promise<HttpInfo<Page>>;
    update(objectId: string, page: Page, archived?: boolean, _options?: Configuration): Promise<Page>;
    updateBatchWithHttpInfo(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<HttpInfo<BatchResponsePage | BatchResponsePageWithErrors>>;
    updateBatch(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Promise<BatchResponsePage | BatchResponsePageWithErrors>;
    updateDraftWithHttpInfo(objectId: string, page: Page, _options?: Configuration): Promise<HttpInfo<Page>>;
    updateDraft(objectId: string, page: Page, _options?: Configuration): Promise<Page>;
    updateLangsWithHttpInfo(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: Configuration): Promise<HttpInfo<void>>;
    updateLangs(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: Configuration): Promise<void>;
}
