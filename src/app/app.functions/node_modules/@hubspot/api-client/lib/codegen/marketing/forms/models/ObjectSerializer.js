"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("../models/CollectionResponseFormDefinitionBaseForwardPaging"), exports);
__exportStar(require("../models/CollectionResponseFormDefinitionBaseForwardPagingResultsInner"), exports);
__exportStar(require("../models/DatepickerField"), exports);
__exportStar(require("../models/DependentField"), exports);
__exportStar(require("../models/DependentFieldDependentField"), exports);
__exportStar(require("../models/DependentFieldFilter"), exports);
__exportStar(require("../models/DropdownField"), exports);
__exportStar(require("../models/EmailField"), exports);
__exportStar(require("../models/EmailFieldValidation"), exports);
__exportStar(require("../models/EnumeratedFieldOption"), exports);
__exportStar(require("../models/ErrorDetail"), exports);
__exportStar(require("../models/FieldGroup"), exports);
__exportStar(require("../models/FileField"), exports);
__exportStar(require("../models/FormDefinitionBase"), exports);
__exportStar(require("../models/FormDefinitionCreateRequestBase"), exports);
__exportStar(require("../models/FormDisplayOptions"), exports);
__exportStar(require("../models/FormPostSubmitAction"), exports);
__exportStar(require("../models/FormStyle"), exports);
__exportStar(require("../models/ForwardPaging"), exports);
__exportStar(require("../models/HubSpotFormConfiguration"), exports);
__exportStar(require("../models/HubSpotFormDefinition"), exports);
__exportStar(require("../models/HubSpotFormDefinitionAllOfLegalConsentOptions"), exports);
__exportStar(require("../models/HubSpotFormDefinitionCreateRequest"), exports);
__exportStar(require("../models/HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptions"), exports);
__exportStar(require("../models/HubSpotFormDefinitionPatchRequest"), exports);
__exportStar(require("../models/LegalConsentCheckbox"), exports);
__exportStar(require("../models/LegalConsentOptionsExplicitConsentToProcess"), exports);
__exportStar(require("../models/LegalConsentOptionsImplicitConsentToProcess"), exports);
__exportStar(require("../models/LegalConsentOptionsLegitimateInterest"), exports);
__exportStar(require("../models/LegalConsentOptionsNone"), exports);
__exportStar(require("../models/LifecycleStage"), exports);
__exportStar(require("../models/MobilePhoneField"), exports);
__exportStar(require("../models/ModelError"), exports);
__exportStar(require("../models/MultiLineTextField"), exports);
__exportStar(require("../models/MultipleCheckboxesField"), exports);
__exportStar(require("../models/NextPage"), exports);
__exportStar(require("../models/NumberField"), exports);
__exportStar(require("../models/NumberFieldValidation"), exports);
__exportStar(require("../models/PaymentLinkRadioField"), exports);
__exportStar(require("../models/PhoneField"), exports);
__exportStar(require("../models/PhoneFieldValidation"), exports);
__exportStar(require("../models/RadioField"), exports);
__exportStar(require("../models/SingleCheckboxField"), exports);
__exportStar(require("../models/SingleLineTextField"), exports);
const CollectionResponseFormDefinitionBaseForwardPaging_1 = require("../models/CollectionResponseFormDefinitionBaseForwardPaging");
const CollectionResponseFormDefinitionBaseForwardPagingResultsInner_1 = require("../models/CollectionResponseFormDefinitionBaseForwardPagingResultsInner");
const DatepickerField_1 = require("../models/DatepickerField");
const DependentField_1 = require("../models/DependentField");
const DependentFieldDependentField_1 = require("../models/DependentFieldDependentField");
const DependentFieldFilter_1 = require("../models/DependentFieldFilter");
const DropdownField_1 = require("../models/DropdownField");
const EmailField_1 = require("../models/EmailField");
const EmailFieldValidation_1 = require("../models/EmailFieldValidation");
const EnumeratedFieldOption_1 = require("../models/EnumeratedFieldOption");
const ErrorDetail_1 = require("../models/ErrorDetail");
const FieldGroup_1 = require("../models/FieldGroup");
const FileField_1 = require("../models/FileField");
const FormDefinitionBase_1 = require("../models/FormDefinitionBase");
const FormDefinitionCreateRequestBase_1 = require("../models/FormDefinitionCreateRequestBase");
const FormDisplayOptions_1 = require("../models/FormDisplayOptions");
const FormPostSubmitAction_1 = require("../models/FormPostSubmitAction");
const FormStyle_1 = require("../models/FormStyle");
const ForwardPaging_1 = require("../models/ForwardPaging");
const HubSpotFormConfiguration_1 = require("../models/HubSpotFormConfiguration");
const HubSpotFormDefinition_1 = require("../models/HubSpotFormDefinition");
const HubSpotFormDefinitionAllOfLegalConsentOptions_1 = require("../models/HubSpotFormDefinitionAllOfLegalConsentOptions");
const HubSpotFormDefinitionCreateRequest_1 = require("../models/HubSpotFormDefinitionCreateRequest");
const HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptions_1 = require("../models/HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptions");
const HubSpotFormDefinitionPatchRequest_1 = require("../models/HubSpotFormDefinitionPatchRequest");
const LegalConsentCheckbox_1 = require("../models/LegalConsentCheckbox");
const LegalConsentOptionsExplicitConsentToProcess_1 = require("../models/LegalConsentOptionsExplicitConsentToProcess");
const LegalConsentOptionsImplicitConsentToProcess_1 = require("../models/LegalConsentOptionsImplicitConsentToProcess");
const LegalConsentOptionsLegitimateInterest_1 = require("../models/LegalConsentOptionsLegitimateInterest");
const LegalConsentOptionsNone_1 = require("../models/LegalConsentOptionsNone");
const LifecycleStage_1 = require("../models/LifecycleStage");
const MobilePhoneField_1 = require("../models/MobilePhoneField");
const ModelError_1 = require("../models/ModelError");
const MultiLineTextField_1 = require("../models/MultiLineTextField");
const MultipleCheckboxesField_1 = require("../models/MultipleCheckboxesField");
const NextPage_1 = require("../models/NextPage");
const NumberField_1 = require("../models/NumberField");
const NumberFieldValidation_1 = require("../models/NumberFieldValidation");
const PaymentLinkRadioField_1 = require("../models/PaymentLinkRadioField");
const PhoneField_1 = require("../models/PhoneField");
const PhoneFieldValidation_1 = require("../models/PhoneFieldValidation");
const RadioField_1 = require("../models/RadioField");
const SingleCheckboxField_1 = require("../models/SingleCheckboxField");
const SingleLineTextField_1 = require("../models/SingleLineTextField");
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = new Set([
    "CollectionResponseFormDefinitionBaseForwardPagingResultsInnerFormTypeEnum",
    "DatepickerFieldFieldTypeEnum",
    "DependentFieldDependentFieldFieldTypeEnum",
    "DependentFieldFilterOperatorEnum",
    "DropdownFieldFieldTypeEnum",
    "EmailFieldFieldTypeEnum",
    "FieldGroupGroupTypeEnum",
    "FieldGroupRichTextTypeEnum",
    "FileFieldFieldTypeEnum",
    "FormDefinitionBaseFormTypeEnum",
    "FormDefinitionCreateRequestBaseFormTypeEnum",
    "FormDisplayOptionsThemeEnum",
    "FormPostSubmitActionTypeEnum",
    "FormStyleSubmitAlignmentEnum",
    "HubSpotFormConfigurationLanguageEnum",
    "HubSpotFormDefinitionFormTypeEnum",
    "HubSpotFormDefinitionAllOfLegalConsentOptionsTypeEnum",
    "HubSpotFormDefinitionAllOfLegalConsentOptionsLawfulBasisEnum",
    "HubSpotFormDefinitionCreateRequestFormTypeEnum",
    "HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptionsTypeEnum",
    "HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptionsLawfulBasisEnum",
    "LegalConsentOptionsExplicitConsentToProcessTypeEnum",
    "LegalConsentOptionsImplicitConsentToProcessTypeEnum",
    "LegalConsentOptionsLegitimateInterestLawfulBasisEnum",
    "LegalConsentOptionsLegitimateInterestTypeEnum",
    "LegalConsentOptionsNoneTypeEnum",
    "MobilePhoneFieldFieldTypeEnum",
    "MultiLineTextFieldFieldTypeEnum",
    "MultipleCheckboxesFieldFieldTypeEnum",
    "NumberFieldFieldTypeEnum",
    "PaymentLinkRadioFieldFieldTypeEnum",
    "PhoneFieldFieldTypeEnum",
    "RadioFieldFieldTypeEnum",
    "SingleCheckboxFieldFieldTypeEnum",
    "SingleLineTextFieldFieldTypeEnum",
]);
let typeMap = {
    "CollectionResponseFormDefinitionBaseForwardPaging": CollectionResponseFormDefinitionBaseForwardPaging_1.CollectionResponseFormDefinitionBaseForwardPaging,
    "CollectionResponseFormDefinitionBaseForwardPagingResultsInner": CollectionResponseFormDefinitionBaseForwardPagingResultsInner_1.CollectionResponseFormDefinitionBaseForwardPagingResultsInner,
    "DatepickerField": DatepickerField_1.DatepickerField,
    "DependentField": DependentField_1.DependentField,
    "DependentFieldDependentField": DependentFieldDependentField_1.DependentFieldDependentField,
    "DependentFieldFilter": DependentFieldFilter_1.DependentFieldFilter,
    "DropdownField": DropdownField_1.DropdownField,
    "EmailField": EmailField_1.EmailField,
    "EmailFieldValidation": EmailFieldValidation_1.EmailFieldValidation,
    "EnumeratedFieldOption": EnumeratedFieldOption_1.EnumeratedFieldOption,
    "ErrorDetail": ErrorDetail_1.ErrorDetail,
    "FieldGroup": FieldGroup_1.FieldGroup,
    "FileField": FileField_1.FileField,
    "FormDefinitionBase": FormDefinitionBase_1.FormDefinitionBase,
    "FormDefinitionCreateRequestBase": FormDefinitionCreateRequestBase_1.FormDefinitionCreateRequestBase,
    "FormDisplayOptions": FormDisplayOptions_1.FormDisplayOptions,
    "FormPostSubmitAction": FormPostSubmitAction_1.FormPostSubmitAction,
    "FormStyle": FormStyle_1.FormStyle,
    "ForwardPaging": ForwardPaging_1.ForwardPaging,
    "HubSpotFormConfiguration": HubSpotFormConfiguration_1.HubSpotFormConfiguration,
    "HubSpotFormDefinition": HubSpotFormDefinition_1.HubSpotFormDefinition,
    "HubSpotFormDefinitionAllOfLegalConsentOptions": HubSpotFormDefinitionAllOfLegalConsentOptions_1.HubSpotFormDefinitionAllOfLegalConsentOptions,
    "HubSpotFormDefinitionCreateRequest": HubSpotFormDefinitionCreateRequest_1.HubSpotFormDefinitionCreateRequest,
    "HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptions": HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptions_1.HubSpotFormDefinitionCreateRequestAllOfLegalConsentOptions,
    "HubSpotFormDefinitionPatchRequest": HubSpotFormDefinitionPatchRequest_1.HubSpotFormDefinitionPatchRequest,
    "LegalConsentCheckbox": LegalConsentCheckbox_1.LegalConsentCheckbox,
    "LegalConsentOptionsExplicitConsentToProcess": LegalConsentOptionsExplicitConsentToProcess_1.LegalConsentOptionsExplicitConsentToProcess,
    "LegalConsentOptionsImplicitConsentToProcess": LegalConsentOptionsImplicitConsentToProcess_1.LegalConsentOptionsImplicitConsentToProcess,
    "LegalConsentOptionsLegitimateInterest": LegalConsentOptionsLegitimateInterest_1.LegalConsentOptionsLegitimateInterest,
    "LegalConsentOptionsNone": LegalConsentOptionsNone_1.LegalConsentOptionsNone,
    "LifecycleStage": LifecycleStage_1.LifecycleStage,
    "MobilePhoneField": MobilePhoneField_1.MobilePhoneField,
    "ModelError": ModelError_1.ModelError,
    "MultiLineTextField": MultiLineTextField_1.MultiLineTextField,
    "MultipleCheckboxesField": MultipleCheckboxesField_1.MultipleCheckboxesField,
    "NextPage": NextPage_1.NextPage,
    "NumberField": NumberField_1.NumberField,
    "NumberFieldValidation": NumberFieldValidation_1.NumberFieldValidation,
    "PaymentLinkRadioField": PaymentLinkRadioField_1.PaymentLinkRadioField,
    "PhoneField": PhoneField_1.PhoneField,
    "PhoneFieldValidation": PhoneFieldValidation_1.PhoneFieldValidation,
    "RadioField": RadioField_1.RadioField,
    "SingleCheckboxField": SingleCheckboxField_1.SingleCheckboxField,
    "SingleLineTextField": SingleLineTextField_1.SingleLineTextField,
};
const parseMimeType = (mimeType) => {
    const [type, subtype] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};
const mimeTypePredicateFactory = (predicate) => (mimeType) => predicate(parseMimeType(mimeType));
const mimeTypeSimplePredicateFactory = (type, subtype) => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type)
        return false;
    if (subtype != null && descriptor.subtype !== subtype)
        return false;
    return true;
});
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');
const supportedMimeTypePredicatesWithPriority = [
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type, format) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let attributeType of attributeTypes) {
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    static deserialize(data, type, format) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let attributeType of attributeTypes) {
                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    }
    static normalizeMediaType(mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }
    static getPreferredMediaType(mediaTypes) {
        if (mediaTypes.length === 0) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        for (const predicate of supportedMimeTypePredicatesWithPriority) {
            for (const mediaType of normalMediaTypes) {
                if (mediaType != null && predicate(mediaType)) {
                    return mediaType;
                }
            }
        }
        throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }
    static stringify(data, mediaType) {
        if (isTextLikeMimeType(mediaType)) {
            return String(data);
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }
    static parse(rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (isTextLikeMimeType(mediaType)) {
            return rawData;
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.parse(rawData);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map