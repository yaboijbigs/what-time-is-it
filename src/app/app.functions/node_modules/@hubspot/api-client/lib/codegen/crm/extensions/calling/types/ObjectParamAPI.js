"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSettingsApi = exports.ObjectRecordingSettingsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectRecordingSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableRecordingSettingsApi(configuration, requestFactory, responseProcessor);
    }
    getUrlFormatWithHttpInfo(param, options) {
        return this.api.getUrlFormatWithHttpInfo(param.appId, options).toPromise();
    }
    getUrlFormat(param, options) {
        return this.api.getUrlFormat(param.appId, options).toPromise();
    }
    markAsReadyWithHttpInfo(param, options) {
        return this.api.markAsReadyWithHttpInfo(param.markRecordingAsReadyRequest, options).toPromise();
    }
    markAsReady(param, options) {
        return this.api.markAsReady(param.markRecordingAsReadyRequest, options).toPromise();
    }
    registerUrlFormatWithHttpInfo(param, options) {
        return this.api.registerUrlFormatWithHttpInfo(param.appId, param.recordingSettingsRequest, options).toPromise();
    }
    registerUrlFormat(param, options) {
        return this.api.registerUrlFormat(param.appId, param.recordingSettingsRequest, options).toPromise();
    }
    updateUrlFormatWithHttpInfo(param, options) {
        return this.api.updateUrlFormatWithHttpInfo(param.appId, param.recordingSettingsPatchRequest, options).toPromise();
    }
    updateUrlFormat(param, options) {
        return this.api.updateUrlFormat(param.appId, param.recordingSettingsPatchRequest, options).toPromise();
    }
}
exports.ObjectRecordingSettingsApi = ObjectRecordingSettingsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableSettingsApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(param, options) {
        return this.api.archiveWithHttpInfo(param.appId, options).toPromise();
    }
    archive(param, options) {
        return this.api.archive(param.appId, options).toPromise();
    }
    createWithHttpInfo(param, options) {
        return this.api.createWithHttpInfo(param.appId, param.settingsRequest, options).toPromise();
    }
    create(param, options) {
        return this.api.create(param.appId, param.settingsRequest, options).toPromise();
    }
    getByIdWithHttpInfo(param, options) {
        return this.api.getByIdWithHttpInfo(param.appId, options).toPromise();
    }
    getById(param, options) {
        return this.api.getById(param.appId, options).toPromise();
    }
    updateWithHttpInfo(param, options) {
        return this.api.updateWithHttpInfo(param.appId, param.settingsPatchRequest, options).toPromise();
    }
    update(param, options) {
        return this.api.update(param.appId, param.settingsPatchRequest, options).toPromise();
    }
}
exports.ObjectSettingsApi = ObjectSettingsApi;
//# sourceMappingURL=ObjectParamAPI.js.map