"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("../models/ApiCollectionResponseJoinTimeAndRecordId"), exports);
__exportStar(require("../models/ApiCollectionResponseRecordListMembershipNoPaging"), exports);
__exportStar(require("../models/ErrorDetail"), exports);
__exportStar(require("../models/JoinTimeAndRecordId"), exports);
__exportStar(require("../models/ListCreateRequest"), exports);
__exportStar(require("../models/ListCreateResponse"), exports);
__exportStar(require("../models/ListFetchResponse"), exports);
__exportStar(require("../models/ListFilterUpdateRequest"), exports);
__exportStar(require("../models/ListFolderCreateRequest"), exports);
__exportStar(require("../models/ListFolderCreateResponse"), exports);
__exportStar(require("../models/ListFolderFetchResponse"), exports);
__exportStar(require("../models/ListMoveRequest"), exports);
__exportStar(require("../models/ListSearchRequest"), exports);
__exportStar(require("../models/ListSearchResponse"), exports);
__exportStar(require("../models/ListUpdateResponse"), exports);
__exportStar(require("../models/ListsByIdResponse"), exports);
__exportStar(require("../models/MembershipChangeRequest"), exports);
__exportStar(require("../models/MembershipsUpdateResponse"), exports);
__exportStar(require("../models/ModelError"), exports);
__exportStar(require("../models/NextPage"), exports);
__exportStar(require("../models/Paging"), exports);
__exportStar(require("../models/PreviousPage"), exports);
__exportStar(require("../models/PublicAbsoluteComparativeTimestampRefineBy"), exports);
__exportStar(require("../models/PublicAbsoluteRangedTimestampRefineBy"), exports);
__exportStar(require("../models/PublicAdsSearchFilter"), exports);
__exportStar(require("../models/PublicAdsTimeFilter"), exports);
__exportStar(require("../models/PublicAllHistoryRefineBy"), exports);
__exportStar(require("../models/PublicAllPropertyTypesOperation"), exports);
__exportStar(require("../models/PublicAndFilterBranch"), exports);
__exportStar(require("../models/PublicAssociationFilterBranch"), exports);
__exportStar(require("../models/PublicAssociationInListFilter"), exports);
__exportStar(require("../models/PublicBatchMigrationMapping"), exports);
__exportStar(require("../models/PublicBoolPropertyOperation"), exports);
__exportStar(require("../models/PublicCalendarDatePropertyOperation"), exports);
__exportStar(require("../models/PublicCampaignInfluencedFilter"), exports);
__exportStar(require("../models/PublicCommunicationSubscriptionFilter"), exports);
__exportStar(require("../models/PublicComparativeDatePropertyOperation"), exports);
__exportStar(require("../models/PublicComparativePropertyUpdatedOperation"), exports);
__exportStar(require("../models/PublicConstantFilter"), exports);
__exportStar(require("../models/PublicCtaAnalyticsFilter"), exports);
__exportStar(require("../models/PublicDatePoint"), exports);
__exportStar(require("../models/PublicDatePropertyOperation"), exports);
__exportStar(require("../models/PublicDateTimePropertyOperation"), exports);
__exportStar(require("../models/PublicEmailEventFilter"), exports);
__exportStar(require("../models/PublicEmailSubscriptionFilter"), exports);
__exportStar(require("../models/PublicEnumerationPropertyOperation"), exports);
__exportStar(require("../models/PublicEventAnalyticsFilter"), exports);
__exportStar(require("../models/PublicEventFilterMetadata"), exports);
__exportStar(require("../models/PublicFiscalQuarterReference"), exports);
__exportStar(require("../models/PublicFiscalYearReference"), exports);
__exportStar(require("../models/PublicFormSubmissionFilter"), exports);
__exportStar(require("../models/PublicFormSubmissionFilterCoalescingRefineBy"), exports);
__exportStar(require("../models/PublicFormSubmissionOnPageFilter"), exports);
__exportStar(require("../models/PublicInListFilter"), exports);
__exportStar(require("../models/PublicInListFilterMetadata"), exports);
__exportStar(require("../models/PublicIndexOffset"), exports);
__exportStar(require("../models/PublicIndexedTimePoint"), exports);
__exportStar(require("../models/PublicIndexedTimePointIndexReference"), exports);
__exportStar(require("../models/PublicIntegrationEventFilter"), exports);
__exportStar(require("../models/PublicListFolder"), exports);
__exportStar(require("../models/PublicMigrationMapping"), exports);
__exportStar(require("../models/PublicMonthReference"), exports);
__exportStar(require("../models/PublicMultiStringPropertyOperation"), exports);
__exportStar(require("../models/PublicNotAllFilterBranch"), exports);
__exportStar(require("../models/PublicNotAnyFilterBranch"), exports);
__exportStar(require("../models/PublicNowReference"), exports);
__exportStar(require("../models/PublicNumAssociationsFilter"), exports);
__exportStar(require("../models/PublicNumOccurrencesRefineBy"), exports);
__exportStar(require("../models/PublicNumberPropertyOperation"), exports);
__exportStar(require("../models/PublicObjectList"), exports);
__exportStar(require("../models/PublicObjectListSearchResult"), exports);
__exportStar(require("../models/PublicOrFilterBranch"), exports);
__exportStar(require("../models/PublicPageViewAnalyticsFilter"), exports);
__exportStar(require("../models/PublicPrivacyAnalyticsFilter"), exports);
__exportStar(require("../models/PublicPropertyAssociationFilterBranch"), exports);
__exportStar(require("../models/PublicPropertyAssociationFilterBranchFilterBranchesInner"), exports);
__exportStar(require("../models/PublicPropertyAssociationFilterBranchFiltersInner"), exports);
__exportStar(require("../models/PublicPropertyAssociationInListFilter"), exports);
__exportStar(require("../models/PublicPropertyFilter"), exports);
__exportStar(require("../models/PublicPropertyReferencedTime"), exports);
__exportStar(require("../models/PublicQuarterReference"), exports);
__exportStar(require("../models/PublicRangedDatePropertyOperation"), exports);
__exportStar(require("../models/PublicRangedNumberPropertyOperation"), exports);
__exportStar(require("../models/PublicRangedTimeOperation"), exports);
__exportStar(require("../models/PublicRelativeComparativeTimestampRefineBy"), exports);
__exportStar(require("../models/PublicRelativeRangedTimestampRefineBy"), exports);
__exportStar(require("../models/PublicRestrictedFilterBranch"), exports);
__exportStar(require("../models/PublicRollingDateRangePropertyOperation"), exports);
__exportStar(require("../models/PublicRollingPropertyUpdatedOperation"), exports);
__exportStar(require("../models/PublicSetOccurrencesRefineBy"), exports);
__exportStar(require("../models/PublicStringPropertyOperation"), exports);
__exportStar(require("../models/PublicSurveyMonkeyFilter"), exports);
__exportStar(require("../models/PublicSurveyMonkeyValueFilter"), exports);
__exportStar(require("../models/PublicSurveyMonkeyValueFilterValueComparison"), exports);
__exportStar(require("../models/PublicTimeOffset"), exports);
__exportStar(require("../models/PublicTimePointOperation"), exports);
__exportStar(require("../models/PublicTimePointOperationTimePoint"), exports);
__exportStar(require("../models/PublicTodayReference"), exports);
__exportStar(require("../models/PublicUnifiedEventsFilter"), exports);
__exportStar(require("../models/PublicUnifiedEventsFilterBranch"), exports);
__exportStar(require("../models/PublicWebinarFilter"), exports);
__exportStar(require("../models/PublicWeekReference"), exports);
__exportStar(require("../models/PublicYearReference"), exports);
__exportStar(require("../models/RecordListMembership"), exports);
const ApiCollectionResponseJoinTimeAndRecordId_1 = require("../models/ApiCollectionResponseJoinTimeAndRecordId");
const ApiCollectionResponseRecordListMembershipNoPaging_1 = require("../models/ApiCollectionResponseRecordListMembershipNoPaging");
const ErrorDetail_1 = require("../models/ErrorDetail");
const JoinTimeAndRecordId_1 = require("../models/JoinTimeAndRecordId");
const ListCreateRequest_1 = require("../models/ListCreateRequest");
const ListCreateResponse_1 = require("../models/ListCreateResponse");
const ListFetchResponse_1 = require("../models/ListFetchResponse");
const ListFilterUpdateRequest_1 = require("../models/ListFilterUpdateRequest");
const ListFolderCreateRequest_1 = require("../models/ListFolderCreateRequest");
const ListFolderCreateResponse_1 = require("../models/ListFolderCreateResponse");
const ListFolderFetchResponse_1 = require("../models/ListFolderFetchResponse");
const ListMoveRequest_1 = require("../models/ListMoveRequest");
const ListSearchRequest_1 = require("../models/ListSearchRequest");
const ListSearchResponse_1 = require("../models/ListSearchResponse");
const ListUpdateResponse_1 = require("../models/ListUpdateResponse");
const ListsByIdResponse_1 = require("../models/ListsByIdResponse");
const MembershipChangeRequest_1 = require("../models/MembershipChangeRequest");
const MembershipsUpdateResponse_1 = require("../models/MembershipsUpdateResponse");
const ModelError_1 = require("../models/ModelError");
const NextPage_1 = require("../models/NextPage");
const Paging_1 = require("../models/Paging");
const PreviousPage_1 = require("../models/PreviousPage");
const PublicAbsoluteComparativeTimestampRefineBy_1 = require("../models/PublicAbsoluteComparativeTimestampRefineBy");
const PublicAbsoluteRangedTimestampRefineBy_1 = require("../models/PublicAbsoluteRangedTimestampRefineBy");
const PublicAdsSearchFilter_1 = require("../models/PublicAdsSearchFilter");
const PublicAdsTimeFilter_1 = require("../models/PublicAdsTimeFilter");
const PublicAllHistoryRefineBy_1 = require("../models/PublicAllHistoryRefineBy");
const PublicAllPropertyTypesOperation_1 = require("../models/PublicAllPropertyTypesOperation");
const PublicAndFilterBranch_1 = require("../models/PublicAndFilterBranch");
const PublicAssociationFilterBranch_1 = require("../models/PublicAssociationFilterBranch");
const PublicAssociationInListFilter_1 = require("../models/PublicAssociationInListFilter");
const PublicBatchMigrationMapping_1 = require("../models/PublicBatchMigrationMapping");
const PublicBoolPropertyOperation_1 = require("../models/PublicBoolPropertyOperation");
const PublicCalendarDatePropertyOperation_1 = require("../models/PublicCalendarDatePropertyOperation");
const PublicCampaignInfluencedFilter_1 = require("../models/PublicCampaignInfluencedFilter");
const PublicCommunicationSubscriptionFilter_1 = require("../models/PublicCommunicationSubscriptionFilter");
const PublicComparativeDatePropertyOperation_1 = require("../models/PublicComparativeDatePropertyOperation");
const PublicComparativePropertyUpdatedOperation_1 = require("../models/PublicComparativePropertyUpdatedOperation");
const PublicConstantFilter_1 = require("../models/PublicConstantFilter");
const PublicCtaAnalyticsFilter_1 = require("../models/PublicCtaAnalyticsFilter");
const PublicDatePoint_1 = require("../models/PublicDatePoint");
const PublicDatePropertyOperation_1 = require("../models/PublicDatePropertyOperation");
const PublicDateTimePropertyOperation_1 = require("../models/PublicDateTimePropertyOperation");
const PublicEmailEventFilter_1 = require("../models/PublicEmailEventFilter");
const PublicEmailSubscriptionFilter_1 = require("../models/PublicEmailSubscriptionFilter");
const PublicEnumerationPropertyOperation_1 = require("../models/PublicEnumerationPropertyOperation");
const PublicEventAnalyticsFilter_1 = require("../models/PublicEventAnalyticsFilter");
const PublicEventFilterMetadata_1 = require("../models/PublicEventFilterMetadata");
const PublicFiscalQuarterReference_1 = require("../models/PublicFiscalQuarterReference");
const PublicFiscalYearReference_1 = require("../models/PublicFiscalYearReference");
const PublicFormSubmissionFilter_1 = require("../models/PublicFormSubmissionFilter");
const PublicFormSubmissionFilterCoalescingRefineBy_1 = require("../models/PublicFormSubmissionFilterCoalescingRefineBy");
const PublicFormSubmissionOnPageFilter_1 = require("../models/PublicFormSubmissionOnPageFilter");
const PublicInListFilter_1 = require("../models/PublicInListFilter");
const PublicInListFilterMetadata_1 = require("../models/PublicInListFilterMetadata");
const PublicIndexOffset_1 = require("../models/PublicIndexOffset");
const PublicIndexedTimePoint_1 = require("../models/PublicIndexedTimePoint");
const PublicIndexedTimePointIndexReference_1 = require("../models/PublicIndexedTimePointIndexReference");
const PublicIntegrationEventFilter_1 = require("../models/PublicIntegrationEventFilter");
const PublicListFolder_1 = require("../models/PublicListFolder");
const PublicMigrationMapping_1 = require("../models/PublicMigrationMapping");
const PublicMonthReference_1 = require("../models/PublicMonthReference");
const PublicMultiStringPropertyOperation_1 = require("../models/PublicMultiStringPropertyOperation");
const PublicNotAllFilterBranch_1 = require("../models/PublicNotAllFilterBranch");
const PublicNotAnyFilterBranch_1 = require("../models/PublicNotAnyFilterBranch");
const PublicNowReference_1 = require("../models/PublicNowReference");
const PublicNumAssociationsFilter_1 = require("../models/PublicNumAssociationsFilter");
const PublicNumOccurrencesRefineBy_1 = require("../models/PublicNumOccurrencesRefineBy");
const PublicNumberPropertyOperation_1 = require("../models/PublicNumberPropertyOperation");
const PublicObjectList_1 = require("../models/PublicObjectList");
const PublicObjectListSearchResult_1 = require("../models/PublicObjectListSearchResult");
const PublicOrFilterBranch_1 = require("../models/PublicOrFilterBranch");
const PublicPageViewAnalyticsFilter_1 = require("../models/PublicPageViewAnalyticsFilter");
const PublicPrivacyAnalyticsFilter_1 = require("../models/PublicPrivacyAnalyticsFilter");
const PublicPropertyAssociationFilterBranch_1 = require("../models/PublicPropertyAssociationFilterBranch");
const PublicPropertyAssociationFilterBranchFilterBranchesInner_1 = require("../models/PublicPropertyAssociationFilterBranchFilterBranchesInner");
const PublicPropertyAssociationFilterBranchFiltersInner_1 = require("../models/PublicPropertyAssociationFilterBranchFiltersInner");
const PublicPropertyAssociationInListFilter_1 = require("../models/PublicPropertyAssociationInListFilter");
const PublicPropertyFilter_1 = require("../models/PublicPropertyFilter");
const PublicPropertyReferencedTime_1 = require("../models/PublicPropertyReferencedTime");
const PublicQuarterReference_1 = require("../models/PublicQuarterReference");
const PublicRangedDatePropertyOperation_1 = require("../models/PublicRangedDatePropertyOperation");
const PublicRangedNumberPropertyOperation_1 = require("../models/PublicRangedNumberPropertyOperation");
const PublicRangedTimeOperation_1 = require("../models/PublicRangedTimeOperation");
const PublicRelativeComparativeTimestampRefineBy_1 = require("../models/PublicRelativeComparativeTimestampRefineBy");
const PublicRelativeRangedTimestampRefineBy_1 = require("../models/PublicRelativeRangedTimestampRefineBy");
const PublicRestrictedFilterBranch_1 = require("../models/PublicRestrictedFilterBranch");
const PublicRollingDateRangePropertyOperation_1 = require("../models/PublicRollingDateRangePropertyOperation");
const PublicRollingPropertyUpdatedOperation_1 = require("../models/PublicRollingPropertyUpdatedOperation");
const PublicSetOccurrencesRefineBy_1 = require("../models/PublicSetOccurrencesRefineBy");
const PublicStringPropertyOperation_1 = require("../models/PublicStringPropertyOperation");
const PublicSurveyMonkeyFilter_1 = require("../models/PublicSurveyMonkeyFilter");
const PublicSurveyMonkeyValueFilter_1 = require("../models/PublicSurveyMonkeyValueFilter");
const PublicSurveyMonkeyValueFilterValueComparison_1 = require("../models/PublicSurveyMonkeyValueFilterValueComparison");
const PublicTimeOffset_1 = require("../models/PublicTimeOffset");
const PublicTimePointOperation_1 = require("../models/PublicTimePointOperation");
const PublicTimePointOperationTimePoint_1 = require("../models/PublicTimePointOperationTimePoint");
const PublicTodayReference_1 = require("../models/PublicTodayReference");
const PublicUnifiedEventsFilter_1 = require("../models/PublicUnifiedEventsFilter");
const PublicUnifiedEventsFilterBranch_1 = require("../models/PublicUnifiedEventsFilterBranch");
const PublicWebinarFilter_1 = require("../models/PublicWebinarFilter");
const PublicWeekReference_1 = require("../models/PublicWeekReference");
const PublicYearReference_1 = require("../models/PublicYearReference");
const RecordListMembership_1 = require("../models/RecordListMembership");
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = new Set([
    "PublicAbsoluteComparativeTimestampRefineByTypeEnum",
    "PublicAbsoluteRangedTimestampRefineByTypeEnum",
    "PublicAdsSearchFilterFilterTypeEnum",
    "PublicAdsTimeFilterFilterTypeEnum",
    "PublicAllHistoryRefineByTypeEnum",
    "PublicAllPropertyTypesOperationOperationTypeEnum",
    "PublicAndFilterBranchFilterBranchTypeEnum",
    "PublicAssociationFilterBranchFilterBranchTypeEnum",
    "PublicAssociationInListFilterFilterTypeEnum",
    "PublicBoolPropertyOperationOperationTypeEnum",
    "PublicCalendarDatePropertyOperationFiscalYearStartEnum",
    "PublicCalendarDatePropertyOperationOperationTypeEnum",
    "PublicCampaignInfluencedFilterFilterTypeEnum",
    "PublicCommunicationSubscriptionFilterFilterTypeEnum",
    "PublicComparativeDatePropertyOperationOperationTypeEnum",
    "PublicComparativePropertyUpdatedOperationOperationTypeEnum",
    "PublicConstantFilterFilterTypeEnum",
    "PublicCtaAnalyticsFilterFilterTypeEnum",
    "PublicDatePointTimeTypeEnum",
    "PublicDatePropertyOperationOperationTypeEnum",
    "PublicDateTimePropertyOperationOperationTypeEnum",
    "PublicEmailEventFilterFilterTypeEnum",
    "PublicEmailEventFilterOperatorEnum",
    "PublicEmailSubscriptionFilterFilterTypeEnum",
    "PublicEnumerationPropertyOperationOperationTypeEnum",
    "PublicEventAnalyticsFilterFilterTypeEnum",
    "PublicFiscalQuarterReferenceReferenceTypeEnum",
    "PublicFiscalYearReferenceReferenceTypeEnum",
    "PublicFormSubmissionFilterFilterTypeEnum",
    "PublicFormSubmissionFilterOperatorEnum",
    "PublicFormSubmissionOnPageFilterFilterTypeEnum",
    "PublicFormSubmissionOnPageFilterOperatorEnum",
    "PublicInListFilterFilterTypeEnum",
    "PublicIndexedTimePointTimeTypeEnum",
    "PublicIndexedTimePointIndexReferenceReferenceTypeEnum",
    "PublicIndexedTimePointIndexReferenceDayOfWeekEnum",
    "PublicIntegrationEventFilterFilterTypeEnum",
    "PublicMonthReferenceReferenceTypeEnum",
    "PublicMultiStringPropertyOperationOperationTypeEnum",
    "PublicNotAllFilterBranchFilterBranchTypeEnum",
    "PublicNotAnyFilterBranchFilterBranchTypeEnum",
    "PublicNowReferenceReferenceTypeEnum",
    "PublicNumAssociationsFilterFilterTypeEnum",
    "PublicNumOccurrencesRefineByTypeEnum",
    "PublicNumberPropertyOperationOperationTypeEnum",
    "PublicOrFilterBranchFilterBranchTypeEnum",
    "PublicPageViewAnalyticsFilterFilterTypeEnum",
    "PublicPrivacyAnalyticsFilterFilterTypeEnum",
    "PublicPropertyAssociationFilterBranchFilterBranchTypeEnum",
    "PublicPropertyAssociationFilterBranchFilterBranchesInnerFilterBranchTypeEnum",
    "PublicPropertyAssociationFilterBranchFiltersInnerFilterTypeEnum",
    "PublicPropertyAssociationInListFilterFilterTypeEnum",
    "PublicPropertyFilterFilterTypeEnum",
    "PublicPropertyReferencedTimeTimeTypeEnum",
    "PublicQuarterReferenceReferenceTypeEnum",
    "PublicRangedDatePropertyOperationOperationTypeEnum",
    "PublicRangedNumberPropertyOperationOperationTypeEnum",
    "PublicRangedTimeOperationTypeEnum",
    "PublicRelativeComparativeTimestampRefineByTypeEnum",
    "PublicRelativeRangedTimestampRefineByTypeEnum",
    "PublicRestrictedFilterBranchFilterBranchTypeEnum",
    "PublicRollingDateRangePropertyOperationOperationTypeEnum",
    "PublicRollingPropertyUpdatedOperationOperationTypeEnum",
    "PublicSetOccurrencesRefineByTypeEnum",
    "PublicStringPropertyOperationOperationTypeEnum",
    "PublicSurveyMonkeyFilterFilterTypeEnum",
    "PublicSurveyMonkeyValueFilterFilterTypeEnum",
    "PublicSurveyMonkeyValueFilterValueComparisonFiscalYearStartEnum",
    "PublicTimePointOperationOperationTypeEnum",
    "PublicTimePointOperationTimePointTimeTypeEnum",
    "PublicTodayReferenceReferenceTypeEnum",
    "PublicUnifiedEventsFilterFilterTypeEnum",
    "PublicUnifiedEventsFilterBranchFilterBranchTypeEnum",
    "PublicUnifiedEventsFilterBranchOperatorEnum",
    "PublicWebinarFilterFilterTypeEnum",
    "PublicWeekReferenceDayOfWeekEnum",
    "PublicWeekReferenceReferenceTypeEnum",
    "PublicYearReferenceReferenceTypeEnum",
]);
let typeMap = {
    "ApiCollectionResponseJoinTimeAndRecordId": ApiCollectionResponseJoinTimeAndRecordId_1.ApiCollectionResponseJoinTimeAndRecordId,
    "ApiCollectionResponseRecordListMembershipNoPaging": ApiCollectionResponseRecordListMembershipNoPaging_1.ApiCollectionResponseRecordListMembershipNoPaging,
    "ErrorDetail": ErrorDetail_1.ErrorDetail,
    "JoinTimeAndRecordId": JoinTimeAndRecordId_1.JoinTimeAndRecordId,
    "ListCreateRequest": ListCreateRequest_1.ListCreateRequest,
    "ListCreateResponse": ListCreateResponse_1.ListCreateResponse,
    "ListFetchResponse": ListFetchResponse_1.ListFetchResponse,
    "ListFilterUpdateRequest": ListFilterUpdateRequest_1.ListFilterUpdateRequest,
    "ListFolderCreateRequest": ListFolderCreateRequest_1.ListFolderCreateRequest,
    "ListFolderCreateResponse": ListFolderCreateResponse_1.ListFolderCreateResponse,
    "ListFolderFetchResponse": ListFolderFetchResponse_1.ListFolderFetchResponse,
    "ListMoveRequest": ListMoveRequest_1.ListMoveRequest,
    "ListSearchRequest": ListSearchRequest_1.ListSearchRequest,
    "ListSearchResponse": ListSearchResponse_1.ListSearchResponse,
    "ListUpdateResponse": ListUpdateResponse_1.ListUpdateResponse,
    "ListsByIdResponse": ListsByIdResponse_1.ListsByIdResponse,
    "MembershipChangeRequest": MembershipChangeRequest_1.MembershipChangeRequest,
    "MembershipsUpdateResponse": MembershipsUpdateResponse_1.MembershipsUpdateResponse,
    "ModelError": ModelError_1.ModelError,
    "NextPage": NextPage_1.NextPage,
    "Paging": Paging_1.Paging,
    "PreviousPage": PreviousPage_1.PreviousPage,
    "PublicAbsoluteComparativeTimestampRefineBy": PublicAbsoluteComparativeTimestampRefineBy_1.PublicAbsoluteComparativeTimestampRefineBy,
    "PublicAbsoluteRangedTimestampRefineBy": PublicAbsoluteRangedTimestampRefineBy_1.PublicAbsoluteRangedTimestampRefineBy,
    "PublicAdsSearchFilter": PublicAdsSearchFilter_1.PublicAdsSearchFilter,
    "PublicAdsTimeFilter": PublicAdsTimeFilter_1.PublicAdsTimeFilter,
    "PublicAllHistoryRefineBy": PublicAllHistoryRefineBy_1.PublicAllHistoryRefineBy,
    "PublicAllPropertyTypesOperation": PublicAllPropertyTypesOperation_1.PublicAllPropertyTypesOperation,
    "PublicAndFilterBranch": PublicAndFilterBranch_1.PublicAndFilterBranch,
    "PublicAssociationFilterBranch": PublicAssociationFilterBranch_1.PublicAssociationFilterBranch,
    "PublicAssociationInListFilter": PublicAssociationInListFilter_1.PublicAssociationInListFilter,
    "PublicBatchMigrationMapping": PublicBatchMigrationMapping_1.PublicBatchMigrationMapping,
    "PublicBoolPropertyOperation": PublicBoolPropertyOperation_1.PublicBoolPropertyOperation,
    "PublicCalendarDatePropertyOperation": PublicCalendarDatePropertyOperation_1.PublicCalendarDatePropertyOperation,
    "PublicCampaignInfluencedFilter": PublicCampaignInfluencedFilter_1.PublicCampaignInfluencedFilter,
    "PublicCommunicationSubscriptionFilter": PublicCommunicationSubscriptionFilter_1.PublicCommunicationSubscriptionFilter,
    "PublicComparativeDatePropertyOperation": PublicComparativeDatePropertyOperation_1.PublicComparativeDatePropertyOperation,
    "PublicComparativePropertyUpdatedOperation": PublicComparativePropertyUpdatedOperation_1.PublicComparativePropertyUpdatedOperation,
    "PublicConstantFilter": PublicConstantFilter_1.PublicConstantFilter,
    "PublicCtaAnalyticsFilter": PublicCtaAnalyticsFilter_1.PublicCtaAnalyticsFilter,
    "PublicDatePoint": PublicDatePoint_1.PublicDatePoint,
    "PublicDatePropertyOperation": PublicDatePropertyOperation_1.PublicDatePropertyOperation,
    "PublicDateTimePropertyOperation": PublicDateTimePropertyOperation_1.PublicDateTimePropertyOperation,
    "PublicEmailEventFilter": PublicEmailEventFilter_1.PublicEmailEventFilter,
    "PublicEmailSubscriptionFilter": PublicEmailSubscriptionFilter_1.PublicEmailSubscriptionFilter,
    "PublicEnumerationPropertyOperation": PublicEnumerationPropertyOperation_1.PublicEnumerationPropertyOperation,
    "PublicEventAnalyticsFilter": PublicEventAnalyticsFilter_1.PublicEventAnalyticsFilter,
    "PublicEventFilterMetadata": PublicEventFilterMetadata_1.PublicEventFilterMetadata,
    "PublicFiscalQuarterReference": PublicFiscalQuarterReference_1.PublicFiscalQuarterReference,
    "PublicFiscalYearReference": PublicFiscalYearReference_1.PublicFiscalYearReference,
    "PublicFormSubmissionFilter": PublicFormSubmissionFilter_1.PublicFormSubmissionFilter,
    "PublicFormSubmissionFilterCoalescingRefineBy": PublicFormSubmissionFilterCoalescingRefineBy_1.PublicFormSubmissionFilterCoalescingRefineBy,
    "PublicFormSubmissionOnPageFilter": PublicFormSubmissionOnPageFilter_1.PublicFormSubmissionOnPageFilter,
    "PublicInListFilter": PublicInListFilter_1.PublicInListFilter,
    "PublicInListFilterMetadata": PublicInListFilterMetadata_1.PublicInListFilterMetadata,
    "PublicIndexOffset": PublicIndexOffset_1.PublicIndexOffset,
    "PublicIndexedTimePoint": PublicIndexedTimePoint_1.PublicIndexedTimePoint,
    "PublicIndexedTimePointIndexReference": PublicIndexedTimePointIndexReference_1.PublicIndexedTimePointIndexReference,
    "PublicIntegrationEventFilter": PublicIntegrationEventFilter_1.PublicIntegrationEventFilter,
    "PublicListFolder": PublicListFolder_1.PublicListFolder,
    "PublicMigrationMapping": PublicMigrationMapping_1.PublicMigrationMapping,
    "PublicMonthReference": PublicMonthReference_1.PublicMonthReference,
    "PublicMultiStringPropertyOperation": PublicMultiStringPropertyOperation_1.PublicMultiStringPropertyOperation,
    "PublicNotAllFilterBranch": PublicNotAllFilterBranch_1.PublicNotAllFilterBranch,
    "PublicNotAnyFilterBranch": PublicNotAnyFilterBranch_1.PublicNotAnyFilterBranch,
    "PublicNowReference": PublicNowReference_1.PublicNowReference,
    "PublicNumAssociationsFilter": PublicNumAssociationsFilter_1.PublicNumAssociationsFilter,
    "PublicNumOccurrencesRefineBy": PublicNumOccurrencesRefineBy_1.PublicNumOccurrencesRefineBy,
    "PublicNumberPropertyOperation": PublicNumberPropertyOperation_1.PublicNumberPropertyOperation,
    "PublicObjectList": PublicObjectList_1.PublicObjectList,
    "PublicObjectListSearchResult": PublicObjectListSearchResult_1.PublicObjectListSearchResult,
    "PublicOrFilterBranch": PublicOrFilterBranch_1.PublicOrFilterBranch,
    "PublicPageViewAnalyticsFilter": PublicPageViewAnalyticsFilter_1.PublicPageViewAnalyticsFilter,
    "PublicPrivacyAnalyticsFilter": PublicPrivacyAnalyticsFilter_1.PublicPrivacyAnalyticsFilter,
    "PublicPropertyAssociationFilterBranch": PublicPropertyAssociationFilterBranch_1.PublicPropertyAssociationFilterBranch,
    "PublicPropertyAssociationFilterBranchFilterBranchesInner": PublicPropertyAssociationFilterBranchFilterBranchesInner_1.PublicPropertyAssociationFilterBranchFilterBranchesInner,
    "PublicPropertyAssociationFilterBranchFiltersInner": PublicPropertyAssociationFilterBranchFiltersInner_1.PublicPropertyAssociationFilterBranchFiltersInner,
    "PublicPropertyAssociationInListFilter": PublicPropertyAssociationInListFilter_1.PublicPropertyAssociationInListFilter,
    "PublicPropertyFilter": PublicPropertyFilter_1.PublicPropertyFilter,
    "PublicPropertyReferencedTime": PublicPropertyReferencedTime_1.PublicPropertyReferencedTime,
    "PublicQuarterReference": PublicQuarterReference_1.PublicQuarterReference,
    "PublicRangedDatePropertyOperation": PublicRangedDatePropertyOperation_1.PublicRangedDatePropertyOperation,
    "PublicRangedNumberPropertyOperation": PublicRangedNumberPropertyOperation_1.PublicRangedNumberPropertyOperation,
    "PublicRangedTimeOperation": PublicRangedTimeOperation_1.PublicRangedTimeOperation,
    "PublicRelativeComparativeTimestampRefineBy": PublicRelativeComparativeTimestampRefineBy_1.PublicRelativeComparativeTimestampRefineBy,
    "PublicRelativeRangedTimestampRefineBy": PublicRelativeRangedTimestampRefineBy_1.PublicRelativeRangedTimestampRefineBy,
    "PublicRestrictedFilterBranch": PublicRestrictedFilterBranch_1.PublicRestrictedFilterBranch,
    "PublicRollingDateRangePropertyOperation": PublicRollingDateRangePropertyOperation_1.PublicRollingDateRangePropertyOperation,
    "PublicRollingPropertyUpdatedOperation": PublicRollingPropertyUpdatedOperation_1.PublicRollingPropertyUpdatedOperation,
    "PublicSetOccurrencesRefineBy": PublicSetOccurrencesRefineBy_1.PublicSetOccurrencesRefineBy,
    "PublicStringPropertyOperation": PublicStringPropertyOperation_1.PublicStringPropertyOperation,
    "PublicSurveyMonkeyFilter": PublicSurveyMonkeyFilter_1.PublicSurveyMonkeyFilter,
    "PublicSurveyMonkeyValueFilter": PublicSurveyMonkeyValueFilter_1.PublicSurveyMonkeyValueFilter,
    "PublicSurveyMonkeyValueFilterValueComparison": PublicSurveyMonkeyValueFilterValueComparison_1.PublicSurveyMonkeyValueFilterValueComparison,
    "PublicTimeOffset": PublicTimeOffset_1.PublicTimeOffset,
    "PublicTimePointOperation": PublicTimePointOperation_1.PublicTimePointOperation,
    "PublicTimePointOperationTimePoint": PublicTimePointOperationTimePoint_1.PublicTimePointOperationTimePoint,
    "PublicTodayReference": PublicTodayReference_1.PublicTodayReference,
    "PublicUnifiedEventsFilter": PublicUnifiedEventsFilter_1.PublicUnifiedEventsFilter,
    "PublicUnifiedEventsFilterBranch": PublicUnifiedEventsFilterBranch_1.PublicUnifiedEventsFilterBranch,
    "PublicWebinarFilter": PublicWebinarFilter_1.PublicWebinarFilter,
    "PublicWeekReference": PublicWeekReference_1.PublicWeekReference,
    "PublicYearReference": PublicYearReference_1.PublicYearReference,
    "RecordListMembership": RecordListMembership_1.RecordListMembership,
};
const parseMimeType = (mimeType) => {
    const [type, subtype] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};
const mimeTypePredicateFactory = (predicate) => (mimeType) => predicate(parseMimeType(mimeType));
const mimeTypeSimplePredicateFactory = (type, subtype) => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type)
        return false;
    if (subtype != null && descriptor.subtype !== subtype)
        return false;
    return true;
});
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');
const supportedMimeTypePredicatesWithPriority = [
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type, format) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let attributeType of attributeTypes) {
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    static deserialize(data, type, format) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let attributeType of attributeTypes) {
                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    }
    static normalizeMediaType(mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }
    static getPreferredMediaType(mediaTypes) {
        if (mediaTypes.length === 0) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        for (const predicate of supportedMimeTypePredicatesWithPriority) {
            for (const mediaType of normalMediaTypes) {
                if (mediaType != null && predicate(mediaType)) {
                    return mediaType;
                }
            }
        }
        throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }
    static stringify(data, mediaType) {
        if (isTextLikeMimeType(mediaType)) {
            return String(data);
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }
    static parse(rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (isTextLikeMimeType(mediaType)) {
            return rawData;
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.parse(rawData);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map