import { RemoteFragment } from '@remote-ui/core';
import { ReactNode, ComponentType } from 'react';
export declare class ExtensionEvent {
    type: string;
    bubbles: boolean;
    timeStamp: number;
    id: string;
    constructor(event: Event);
}
export type TypesOfReadOnlyArray<T extends ReadonlyArray<unknown>> = T extends ReadonlyArray<infer ElementType> ? ElementType : never;
export declare class FormSubmitExtensionEvent<V> extends ExtensionEvent {
    targetValue: V;
    constructor(value: V, event: Event);
}
export type ReactionsHandler<T> = (event: T, reactions: Reactions) => void | Promise<void>;
export type OverlayComponentProps = {
    overlay?: RemoteFragment;
};
/**
 * The props type for {@link !components.Alert}.
 *
 * @category Component Props
 */
export interface AlertProps {
    /**
     * The bolded title text of the alert.
     *
     */
    title: string;
    /**
     * The main content of the alert message.
     *
     */
    children?: ReactNode;
    /**
     * The color of the alert.
     *
     * @defaultValue `"info"`
     */
    variant?: 'info' | 'warning' | 'success' | 'error' | 'danger' | 'tip';
}
export interface BaseButtonProps {
    /**
     * A function that will be invoked when the button is clicked. Do not use this function for submitting a form; use Form's `onSubmit` function instead.
     *
     * @event
     */
    onClick?: ReactionsHandler<ExtensionEvent>;
    /**
     * A URL that will be opened when the button is clicked. If the value is a URL external to `hubspot.com` it will be opened in a new tab.
     */
    href?: HrefProp;
    /**
     * Determines whether or not the button should be disabled.
     */
    disabled?: boolean;
    /**
     * Sets the color variation of the button.
     *
     * @defaultValue `"secondary"`
     */
    variant?: 'primary' | 'secondary' | 'destructive' | 'transparent';
    /**
     * Sets the HTML attribute "role" of the button.
     *
     * @defaultValue `"button"`
     */
    type?: 'button' | 'reset' | 'submit';
    /**
     * Sets the content that will render inside the Button. This prop is passed implicitly by providing sub-components. Only regular text and Icons are permitted.
     */
    children: ReactNode;
    /**
     * Sets the size of the button.
     *
     * @defaultValue `"md"`
     */
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
}
/**
 * The props type for {@link !components.Button}.
 *
 * @category Component Props
 */
export interface ButtonProps extends BaseButtonProps, OverlayComponentProps {
}
/**
 * Extra configuration passed to the overlay
 */
export interface LoadingButtonOverlayOptions {
    /**
     * If `onLoadingFinish`, the overlay will open once the loading operation is done.
     * If `onClick`, the overlay will open as soon as there is a click on the button.
     *
     * @defaultValue `"onClick"`
     */
    openBehavior?: 'onClick' | 'onLoadingFinish';
}
/**
 * The props type for {@link !components.LoadingButton}.
 *
 * @category Component Props
 */
export interface LoadingButtonProps extends BaseButtonProps, OverlayComponentProps {
    /**
     * Sets the color variation of the button.
     *
     * @defaultValue `"secondary"`
     */
    variant?: 'primary' | 'secondary' | 'destructive';
    /**
     * If true, the loading indicator is shown and the button becomes disabled.
     *
     * @defaultValue `false`
     */
    loading?: boolean;
    /**
     * Extra configuration passed to the overlay
     */
    overlayOptions?: LoadingButtonOverlayOptions;
    /**
     * Controls the icon that's shown after loading is done.
     *
     * @defaultValue `"success"`
     */
    resultIconName?: IconNames;
}
/**
 * The props type for {@link !components.ButtonRow}.
 *
 * @category Component Props
 */
export interface ButtonRowProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * Disables the dropdown list of buttons that appears when the children expand beyond the horizontal space.
     *
     * @defaultValue `false`
     */
    disableDropdown?: boolean;
    /**
     * Controls the appearance and text content of the dropdown button.
     */
    dropDownButtonOptions?: ButtonRownDropDownButtonOptionsProps;
}
/** Configures the Dropdown Button in the ButtonRow component */
export interface ButtonRownDropDownButtonOptionsProps {
    /**
     * Sets the content for the dropdown button.
     *
     * @defaultValue `"More"`
     */
    text?: string;
    /**
     * Sets the size of the dropdown button.
     *
     * @defaultValue `"md"`
     */
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    /**
     * Controls the appearance of the dropdown button
     *
     * @defaultValue `"secondary"`
     */
    variant?: 'primary' | 'secondary' | 'transparent';
}
/**
 * The props type for {@link !components.Card}.
 *
 * @category Component Props
 */
export interface CardProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
}
/**
 * The props type for {@link !components.BarChart}.
 *
 * @category Component Props
 */
export type BarChartProps = ChartProps;
/**
 * The props type for {@link !components.LineChart}.
 *
 * @category Component Props
 */
export type LineChartProps = ChartProps;
export interface ChartProps {
    /**
     * The data used to render the chart. You can optionally provide configuration options.
     */
    data: ChartDataRow[] | {
        data: ChartDataRow[];
        options?: ChartDataOptions;
    };
    /**
     * The configuration for the axes of the chart.
     */
    axes: ChartAxisPair;
    /**
     * Configuration options for the chart as a whole.
     */
    options?: ChartOptions;
}
export type ChartDataRow = {
    [key: string]: number | string;
};
export type ChartDataOptions = {
    /**
     * A mapping of fields to human-readable labels.
     * We recommend pre-formatting your data to be human-readable instead of using this configuration.
     */
    propertyLabels?: {
        [fields: string]: Record<string, string>;
    };
};
export type ChartAxisPair = {
    /**
     * The field to use for the horizontal x-axis.
     */
    x: ChartAxis;
    /**
     * The field to use for the vertical y-axis.
     */
    y: ChartAxis;
    /**
     * Configuration options for the pair of axes.
     */
    options?: AxisPairOptions;
};
export type ChartAxis = {
    /**
     * The dataset field that should be graphed on this axis.
     */
    field: string;
    /**
     * The type of data in the field property. Please read the documentation for the expected formats for each fieldType.
     */
    fieldType: ChartFieldType;
    /**
     * The axis display label. Note: this will also be used in the legend and the hover tooltips.
     */
    label?: string;
};
export type AxisPairOptions = {
    /**
     * If provided, the data will be grouped by color for this field.
     */
    groupFieldByColor?: string;
    /**
     * When set to true, grouped data will be stacked.
     *
     * @defaultValue `false`
     */
    stacking?: boolean;
    /**
     * If provided, assigns a color to each specified values of the field provided in `groupFieldByColor`.
     */
    colors?: {
        [key: string]: ChartColor;
    };
};
export declare const chartFieldTypes: {
    readonly datetime: "datetime";
    readonly linear: "linear";
    readonly category: "category";
};
/**
 * The type of field for this axis.
 * - `datetime`: Used for time data, such as JavaScript timestamps.
 * - `linear`: Used for numerical data, such as quantities.
 * - `category`: Used for categorical data, such as different types of products.
 *
 * Please read the documentation for recommended usage.
 */
export type ChartFieldType = keyof typeof chartFieldTypes;
export type ChartOptions = {
    /**
     * Renders a title above the chart.
     */
    title?: string;
    /**
     * When set to `true`, shows a legend for the chart.
     *
     * @defaultValue `false`
     */
    showLegend?: boolean;
    /**
     * When set to `true`, shows hover tooltips for the charted data.
     *
     * @defaultValue `false`
     */
    showTooltips?: boolean;
    /**
     * When set to `true`, shows labels for the data directly on the chart.
     *
     * @defaultValue `false`
     */
    showDataLabels?: boolean;
    /**
     * Use to choose the order in which our chart colors are assigned to your data. Unspecified colors will be chosen after the ones you've provided here,
     * so you don't need to provide a complete list of all possible colors.
     * Please read the documentation for guidance on color usage.
     */
    colorList?: ChartColor[];
    /** @deprecated use colorList instead */
    colors?: ChartColor[];
};
/**
 * The allowed colors for data displayed on the chart.
 */
export type ChartColor = 'orange' | 'aqua' | 'purple' | 'yellow' | 'pink' | 'blue' | 'green' | 'darkOrange' | 'darkAqua' | 'darkPurple' | 'darkYellow' | 'darkPink' | 'darkBlue' | 'darkGreen';
/**
 * The props type for {@link !components.DescriptionListItem}.
 *
 * @category Component Props
 */
export interface DescriptionListItemProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * Text to be displayed as the label.
     *
     */
    label: string;
}
/**
 * The props type for {@link !components.DescriptionList}.
 *
 * @category Component Props
 */
export interface DescriptionListProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components. The children should be {@link !components.DescriptionListItem}.
     *
     */
    children: ReactNode;
    /**
     * The direction the label/value pairs are placed in the description list container.
     *
     * @defaultValue `"column"`
     */
    direction?: 'row' | 'column';
}
/**
 * The props type for {@link !components.Divider}.
 *
 * @category Component Props
 */
export interface DividerProps {
    /**
     * The space between the divider and the content above and below it.
     *
     * @defaultValue `"small"`
     */
    distance?: AllDistances;
}
/**
 * The props type for {@link !components.EmptyState}.
 *
 * @category Component Props
 */
export interface EmptyStateProps {
    /**
     * When set to `true`, removes the default vertical margins in the component.
     *
     * @defaultValue `false`
     */
    flush?: boolean;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * The text for the title header.
     *
     * @defaultValue `"All is not lost."`
     *
     */
    title?: string;
    /**
     * Sets the layout direction for the content. Can be either `horizontal` or `vertical`.
     *
     * @defaultValue `"horizontal"`
     */
    layout?: 'horizontal' | 'vertical';
    /**
     * When set to `true`, swaps the visual order of the text (primary) and image (secondary) content. This ensures the primary content is still presented first to assistive technology.
     *
     * @defaultValue `false`
     */
    reverseOrder?: boolean;
    /**
     * The max-width(in pixels) for the image container.
     *
     * @defaultValue `250`
     */
    imageWidth?: number;
}
/**
 * The props type for {@link !components.ErrorState}.
 *
 * @category Component Props
 */
export interface ErrorStateProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * The text of the title header.
     *
     */
    title?: string;
    /**
     * The type of error image that will be shown.
     *
     * @defaultValue `"error"`
     */
    type?: 'error' | 'support' | 'lock';
}
export type FormInputValues = Record<string, string | number>;
/**
 * The props type for {@link !components.Form}.
 *
 * @category Component Props
 */
export interface FormProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * The function that is called when the form is submitted. It will receive a FormSubmitExtensionEvent as an argument and its return value will be ignored. This function should be used instead of Button's `onClick` for the Form's submit button.
     *
     * @event
     */
    onSubmit?: ReactionsHandler<FormSubmitExtensionEvent<FormInputValues>>;
    /** @deprecated the value for `preventDefault` is now always `true`, use `onSubmit` to handle all form submission behavior */
    preventDefault?: boolean;
    /**
     * Specifies how autcomplete behaves in the entire form.
     * @defaultValue `"on"`
     */
    autoComplete?: 'off' | 'on';
}
/**
 * The props type for {@link !components.Heading}.
 *
 * @category Component Props
 */
export interface HeadingProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * When set to true, text will not line break.
     *
     * @defaultValue `false`
     */
    inline?: boolean;
}
/**
 * The props type for {@link !components.Iframe}.
 *
 * @ignore
 * @experimental
 * @category Component Props
 */
export interface IframeProps {
    /**
     * Sets the height of the iframe. If this prop is not provided, the iframe defaults size medium.
     *
     * @defaultValue `"medium"`
     */
    height?: TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'];
    /**
     * The URL to render into the inline iframe.
     */
    src: string;
}
/**
 * The props type for {@link !components.Icon}.
 *
 * @category Component Props
 */
export interface IconProps {
    /**
     * Sets the specific icon to display.
     */
    name: IconNames;
    /**
     * Sets the size of the icon. If this prop is not provided, the icon will default to the size of its parent.
     *
     * @defaultValue `"medium"`
     */
    size?: TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'];
    /**
     * Sets the text that a screenreader will read for this icon.
     */
    screenReaderText?: string;
}
export declare const iconNames: {
    readonly success: "success";
    readonly remove: "remove";
    readonly add: "add";
    readonly attach: "attach";
    readonly date: "date";
    readonly copy: "duplicate";
    readonly delete: "delete";
    readonly edit: "edit";
    readonly email: "email";
    readonly exclamation: "exclamation";
    readonly question: "question";
    readonly home: "home";
    readonly location: "location";
    readonly upCarat: "upCarat";
    readonly downCarat: "downCarat";
    readonly warning: "warning";
    readonly shoppingCart: "cart";
    readonly clock: "time";
    readonly comment: "comments";
    readonly contact: "contacts";
    readonly star: "favorite";
    readonly file: "file";
    readonly reports: "reports";
    readonly video: "video";
    readonly robot: "simpleBot";
    readonly refresh: "refresh";
    readonly faceHappy: "emoji";
    readonly faceNeutral: "emojiLineNeutral";
    readonly faceSad: "emojiLineSad";
    readonly upload: "upload";
    readonly download: "download";
    readonly left: "left";
    readonly right: "right";
    readonly dataSync: "dataSync";
    readonly imageGallery: "imageGallery";
    readonly search: "search";
    readonly save: "saveEditableView";
    readonly notification: "notification";
    readonly bulb: "bulb";
    readonly settings: "settings";
    readonly filter: "filter";
    readonly gauge: "gauge";
    readonly enroll: "enroll";
    readonly generateChart: "generateChart";
    readonly gift: "gift";
    readonly flame: "highlyEngagedLead";
    readonly inbox: "inbox";
    readonly image: "insertImage";
    readonly quote: "insertQuote";
    readonly insertVideo: "insertVideo";
    readonly invoice: "invoice";
    readonly key: "key";
    readonly book: "knowledgeBase";
    readonly globe: "language";
    readonly lesson: "lesson";
    readonly link: "link";
    readonly listView: "listView";
    readonly locked: "locked";
    readonly mention: "mention";
    readonly messages: "messages";
    readonly mobile: "mobile";
    readonly notificationOff: "notificationOff";
    readonly hash: "numericDataType";
    readonly objectAssociations: "objectAssociations";
    readonly objectAssociationsManyToMany: "objectAssociationsManyToMany";
    readonly objectAssociationsManyToOne: "objectAssociationsManyToOne";
    readonly office365: "office365";
    readonly order: "order";
    readonly paymentSubscriptions: "paymentSubscriptions";
    readonly product: "product";
    readonly powerPointFile: "powerPointFile";
    readonly presentation: "presentation";
    readonly publish: "publish";
    readonly questionAnswer: "questionAnswer";
    readonly quickbooks: "quickbooks";
    readonly readMore: "readMore";
    readonly realEstateListing: "realEstateListing";
    readonly readOnlyView: "readOnlyView";
    readonly recentlySelected: "recentlySelected";
    readonly record: "record";
    readonly redo: "redo";
    readonly undo: "undo";
    readonly registration: "registration";
    readonly replace: "replace";
    readonly rotate: "rotate";
    readonly salesQuote: "salesQuote";
    readonly salesTemplates: "salesTemplates";
    readonly sequences: "sequences";
    readonly spellCheck: "spellCheck";
    readonly strike: "strike";
    readonly tablet: "tablet";
    readonly tag: "tag";
    readonly tasks: "tasks";
    readonly test: "test";
    readonly ticket: "ticket";
    readonly thumbsUp: "thumbsUp";
    readonly thumbsDown: "thumbsDown";
    readonly translate: "translate";
    readonly trophy: "trophy";
    readonly videoFile: "videoFile";
    readonly videoPlayerSubtitles: "videoPlayerSubtitles";
    readonly view: "view";
    readonly viewDetails: "viewDetails";
    readonly website: "website";
    readonly workflows: "workflows";
    readonly zoomIn: "zoomIn";
    readonly zoomOut: "zoomOut";
    readonly goal: "goal";
    readonly campaigns: "campaigns";
    readonly cap: "cap";
    readonly block: "block";
    readonly bank: "bank";
    readonly approvals: "approvals";
    readonly appointment: "appointment";
    readonly facebook: "socialBlockFacebook";
    readonly googlePlus: "socialBlockGoogleplus";
    readonly instagram: "socialBlockInstagram";
    readonly linkedin: "socialBlockLinkedin";
    readonly pinterest: "socialBlockPinterest";
    readonly rss: "socialBlockRss";
    readonly twitter: "socialBlockTwitter";
    readonly x: "socialBlockX";
    readonly xing: "socialBlockXing";
    readonly youtube: "socialBlockYoutube";
    readonly youtubePlay: "socialBlockYoutubeplay";
    readonly sortAlpAsc: "sortAlpAsc";
    readonly sortAlpDesc: "sortAlpDesc";
    readonly sortAmtAsc: "sortAmtAsc";
    readonly sortAmtDesc: "sortAmtDesc";
    readonly sortNumAsc: "sortNumAsc";
    readonly sortNumDesc: "sortNumDesc";
    readonly sortTableAsc: "sortTableAsc";
    readonly sortTableDesc: "sortTableDesc";
    readonly text: "text";
    readonly textColor: "textColor";
    readonly textDataType: "textDataType";
    readonly textSnippet: "textSnippet";
    readonly calling: "calling";
    readonly callingHangup: "callingHangup";
    readonly callingMade: "callingMade";
    readonly callingMissed: "callingMissed";
    readonly callingVoicemail: "callingVoicemail";
    readonly faceHappyFilled: "emojiFillHappy";
    readonly faceNeutralFilled: "emojiFillNeutral";
    readonly faceSadFilled: "emojiFillSad";
};
export type IconNames = keyof typeof iconNames;
/**
 * The props type for {@link !components.Image}.
 *
 * @category Component Props
 */
export interface ImageProps extends OverlayComponentProps {
    /**
     * The alt text for the image.
     *
     */
    alt?: string;
    /**
     * If provided, will be used as the href that will be opened in a new browser tab on click.
     *
     */
    href?: HrefProp;
    /**
     * A function that will be called when the image is clicked.
     *
     * @event
     */
    onClick?: ReactionsHandler<ExtensionEvent>;
    /**
     * The URL of the image to display.
     *
     */
    src: string;
    /**
     * The pixel width of the image.
     *
     */
    width?: number;
    /**
     * The pixel height of the image.
     *
     */
    height?: number;
}
/**
 * Generic collection of props for all inputs
 * @internal
 * */
interface BaseInputProps<T = string, V = string> {
    /**
     * The label text to display for the form input element.
     */
    label: string;
    /**
     * The unique identifier for the input element, this could be thought of as the HTML5 [Input element's name attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name).
     */
    name: string;
    /**
     * The value of the input.
     */
    value?: T;
    /**
     * Determines if the required indicator should be displayed.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * Determines if the field is editable or not.
     *
     * @defaultValue `false`
     */
    readOnly?: boolean;
    /**
     * Instructional message to display to the user to help understand the purpose of the input.
     */
    description?: string;
    /**
     * Text that will appear in a tooltip next to the input label.
     */
    tooltip?: string;
    /**
     * Text that appears in the input when it has no value set.
     */
    placeholder?: string;
    /**
     * If set to `true`, `validationMessage` is displayed as an error message, if it was provided. The input will also render its error state to let the user know there is an error. If set to `false`, `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * The value of the input on the first render.
     */
    defaultValue?: T;
    /**
     * The text to show under the input for error or success validations.
     */
    validationMessage?: string;
    /**
     * A callback function that is invoked when the value is committed. Currently these times are `onBlur` of the input and when the user submits the form.
     *
     * @event
     */
    onChange?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field is edited by the user. It is recommended that you do not use this value to update state, that is what `onChange` should be used for. Instead this should be used for validation.
     *
     * @event
     */
    onInput?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field loses focus.
     *
     * @event
     */
    onBlur?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field gets focused.
     *
     * @event
     */
    onFocus?: (value: V) => void;
}
/**
 * The props type for {@link !components.Input}.
 *
 * @category Component Props
 */
export interface InputProps extends BaseInputProps {
    /**
     * Sets the type of input to render.
     *
     * @defaultValue `"text"`
     */
    type?: 'text' | 'password';
}
/**
 * The props type for {@link !components.TextArea}.
 *
 * @category Component Props
 */
export interface TextAreaProps extends BaseInputProps {
    /**
     * The visible width of the text field in average character widths.
     */
    cols?: number;
    /**
     * The maximum number of characters (UTF-16 code units) that the user can enter. If not specified, the max length is unlimited.
     */
    maxLength?: number;
    /**
     * The number of visible text lines for the text field.
     */
    rows?: number;
    /**
     * Sets whether the element is resizable, and if so in which directions.
     *
     * @defaultValue `"both"`
     */
    resize?: 'vertical' | 'horizontal' | 'both' | 'none';
}
/**
 * Textarea was changed to TextArea. Exporting both for backwards compat
 *
 * @ignore
 * @internal
 * */
export type TextareaProps = TextAreaProps;
/**
 * @internal
 * @ignore
 * */
type BaseInputForNumber = Omit<BaseInputProps<number, number>, 'onInput'>;
/**
 * The props type for {@link !components.NumberInput}.
 *
 * @category Component Props
 */
export interface NumberInputProps extends BaseInputForNumber {
    /**
     * Sets the lower bound of the input.
     *
     */
    min?: number;
    /**
     * Sets the upper bound of the input.
     *
     */
    max?: number;
    /**
     * Sets the number of digits to the right of the decimal point.
     *
     */
    precision?: number;
    /**
     * Formats the input as a decimal point (decimal) or percentage (percentage).
     *
     * @defaultValue `"decimal"`
     */
    formatStyle?: 'decimal' | 'percentage';
    /** @deprecated use onChange instead. It doesn't guarantee valid format */
    onInput?: (value: number) => void;
}
/**
 * The props type for {@link !components.StepperInput}.
 *
 * @category Component Props
 */
export interface StepperInputProps extends Omit<NumberInputProps, 'onInput'> {
    /** The amount that the current value will increase or decrease on each step button click.
     * @defaultValue `1`
     */
    stepSize?: number;
    /**
     * Text that will appear in a tooltip next to the step up button when users
     * can't increase the current value.
     */
    maxValueReachedTooltip?: string;
    /**
     * Text that will appear in a tooltip next to the step down button when users
     * can't decrease the current value.
     */
    minValueReachedTooltip?: string;
}
/** Object that represents dates. */
export interface BaseDate {
    /** the four-digit year (e.g., 2023). */
    year: number;
    /** starting at 0, the number of the month (e.g., 0 = January, 11 = December). */
    month: number;
    /** the number of the day (e.g., 1 = the first day of the month).*/
    date: number;
}
/** The values used to invoke events on the DateInput component */
export interface DateInputEventsPayload extends BaseDate {
    /** Selected date with formatting option applied. (e.g., 09/04/1986). */
    formattedDate?: string;
}
/**
 * @internal
 * @ignore
 * */
type BaseDateInputForDate = Omit<BaseInputProps<BaseDate | null, DateInputEventsPayload>, 'onInput' | 'placeholder'>;
/**
 * The props type for {@link !components.DateInput}.
 *
 * @category Component Props
 */
export interface DateInputProps extends BaseDateInputForDate {
    /**
     * Sets the earliest date that will be valid.
     */
    min?: BaseDate;
    /**
     * Sets the latest date that will be valid.
     */
    max?: BaseDate;
    /**
     * Sets the message that users will see when they hover over dates before the min date.
     *
     * @defaultValue `"You must choose a newer date"`
     */
    minValidationMessage?: string;
    /**
     * Sets the message that users will see when the hover over dates after the max date.
     *
     * @defaultValue `"You must choose an older date"`
     */
    maxValidationMessage?: string;
    /**
     * Sets the date format that input will display to users.
     *
     * @defaultValue `short`
     *
     * #### Format Options
     *
     * - short: `09/04/1986`
     * - long: `September 4, 1986`
     * - medium : `Sep 4, 1986`
     * - standard: `1986-09-04`
     * - L: `09/04/1986`
     * - LL: `September 4, 1986`
     * - ll : `Sep 4, 1986`
     * - YYYY-MM-DD: `1986-09-04`
     */
    format?: 'YYYY-MM-DD' | 'L' | 'LL' | 'll' | 'short' | 'long' | 'medium' | 'standard';
    /**
     * Sets the timezone that the component will user to calculate valid dates.
     *
     * @defaultValue `"userTz"`
     */
    timezone?: 'userTz' | 'portalTz';
    /**
     * Sets the label of the clear button.
     *
     * @defaultValue `"Clear"`
     */
    clearButtonLabel?: string;
    /**
     * Sets the label of the today button.
     *
     * @defaultValue `"Today"`
     */
    todayButtonLabel?: string;
}
/**
 * The props type for {@link !components.ProgressBar}.
 *
 * @category Component Props
 */
export interface ProgressBarProps {
    /**
     * The text that displays above the progress bar.
     *
     */
    title?: string;
    /**
     * Accessibility label.
     *
     */
    'aria-label'?: string;
    /**
     * Whether the progress bar displays the completion percentage.
     *
     * @defaultValue `false`
     */
    showPercentage?: boolean;
    /**
     * The number representing the progress so far.
     *
     * @defaultValue `0`
     */
    value?: number;
    /**
     * The maximum value of the progress bar.
     *
     * @defaultValue `100`
     */
    maxValue?: number;
    /**
     * The text that explains the current state of the value property. For example, "150 out of 250". Displays above the progress bar on the right side.
     *
     */
    valueDescription?: string;
    /**
     * The color that indicates the type of progress bar.
     *
     * @defaultValue `"success"`
     */
    variant?: 'success' | 'danger' | 'warning';
    /** @deprecated use maxValue instead */
    valueMax?: number;
}
/**
 * Generic collection of props for select components
 * @internal
 * */
export interface BaseSelectProps {
    /**
     * The text that displays above to the dropdown menu.
     *
     */
    label?: string;
    /**
     * The unique identifier for the select element.
     *
     */
    name?: string;
    /**
     * When set to `true`, displays a required field indicator.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * When set to `true`, sets the field as read-only on the CRM record, and users will not be able to fill the input field.
     *
     * @defaultValue `false`
     */
    readOnly?: boolean;
    /**
     * Displayed text that describes the field's purpose.
     *
     */
    description?: string;
    /**
     * The text that displays in a tooltip next to the label.
     *
     */
    tooltip?: string;
    /**
     * Text that appears in the input when no value is set.
     *
     */
    placeholder?: string;
    /**
     * When set to `true`, `validationMessage` is displayed as an error message if provided.
     * The input will also render its error state to let the user know there's an error.
     * If left `false` (default), `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * The text to show if the input has an error.
     *
     */
    validationMessage?: string;
    /**
     * The options to display in the dropdown menu.
     */
    options: {
        /** Will be used as the display text. **/
        label: string;
        /** Should be the option's unique identifier, which is submitted with the form. **/
        value: string | number;
    }[];
    /**
     * The variant type for the select.
     *
     * @defaultValue `"input"`
     */
    variant?: 'transparent' | 'input';
}
/**
 * The props type for {@link !components.Select}.
 *
 * @category Component Props
 */
export interface SelectProps extends BaseSelectProps {
    /**
     * The value of the select input.
     *
     */
    value?: string | number;
    /**
     * A callback function that is invoked when the value is committed.
     *
     * @event
     */
    onChange?: (value: NonNullable<SelectProps['value']>) => void;
    /**
     * The variant type for the select.
     *
     * @defaultValue `"input"`
     */
    variant?: 'transparent' | 'input';
}
/**
 * The props type for {@link !components.MultiSelect}.
 *
 * @category Component Props
 */
export interface MultiSelectProps extends BaseSelectProps {
    /**
     * The value of the select input.
     *
     */
    value?: (string | number)[];
    /**
     * A callback function that is invoked when the value is committed.
     *
     * @event
     */
    onChange?: (value: NonNullable<MultiSelectProps['value']>) => void;
}
/**
 * The props type for {@link !components.StatusTag}.
 *
 * @category Component Props
 */
export interface StatusTagProps {
    /**
     * The status tag's indicator color.
     *
     * @defaultValue `"default"`
     */
    variant?: 'danger' | 'warning' | 'info' | 'success' | 'default';
    /**
     * When set to true, the status tag's dot will be a ring instead.
     *
     * @defaultValue `false `
     */
    hollow?: boolean;
    /**
     * A function that will be invoked when the status tag is clicked. It receives no arguments and its return value is ignored.
     *
     * @event
     */
    onClick?: () => void;
    /**
     * When set to true, the status tag will show a small clickable 'x' icon.
     *
     * @defaultValue `false`
     */
    showRemoveIcon?: boolean;
    /**
     * A function that will be invoked when the 'x' icon is clicked. It receives no arguments and its return value is ignored.
     *
     * @event
     */
    onRemoveClick?: () => void;
    /**
     * Sets the content that will render inside the StatusTag. This prop is passed implicitly by providing sub-components. We recommend only using a small amount of text.
     */
    children: ReactNode;
}
/**
 * The props type for {@link !components.Tag}.
 *
 * @category Component Props
 */
export interface TagProps extends OverlayComponentProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * The tag's color. The following variants are available.
     *
     * @defaultValue `"default"`
     */
    variant?: 'default' | 'warning' | 'success' | 'error' | 'info';
    /**
     * A function that will be invoked when the tag is clicked.
     *
     * @event
     */
    onClick?: ReactionsHandler<ExtensionEvent>;
    /**
     * When set to true, this component can be aligned side-by-side with text.
     *
     * @defaultValue `false`
     */
    inline?: boolean;
}
/**
 * @internal
 * Format options for text component.
 */
export interface TextFormatOptions {
    /**
     * Weight of the font.
     *
     * @defaultValue `"regular"`
     */
    fontWeight?: 'regular' | 'bold' | 'demibold';
    /**
     * If `true`, font will be in italicized.
     *
     * @defaultValue `false`
     */
    italic?: boolean;
    /**
     * Line decoration of the font.
     *
     * @defaultValue `"none"`
     */
    lineDecoration?: 'none' | 'underline' | 'strikethrough';
}
/**
 * The props type for {@link !components.Text}.
 *
 * @interface
 * @category Component Props
 */
export type TextProps = {
    /**
     * The style of text to display. Can be either of:
     *
     * - bodytext: the default value which renders the standard text size.
     * - microcopy: smaller text used for adding context.
     *
     * @defaultValue `"bodytext"`
     */
    variant?: 'bodytext' | 'microcopy';
    /**
     * When set to `true`, inserts a line break.
     *
     * @defaultValue `false`
     */
    inline?: boolean;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * @interface
     * The style of text to display. Can be any of:
     *
     * - { fontWeight: 'bold' }
     * - { fontWeight: 'demibold' }
     * - { italic: true }
     * - { lineDecoration: 'strikethrough' }
     * - { lineDecoration: 'underline' }
     * - <Text inline={true}>
     */
    format?: TextFormatOptions;
    /**
     * @interface
     * truncates long strings to a single line. If the full string doesn’t fit in one line,
     * it’s shown in a tooltip on hover.
     *
     * - `false` => no truncation(default).
     * - `true` => truncates the string to a single line. Full-text will show inside the tooltip.
     * - { tooltipText: 'some text' } => truncates the string and lets you control the contents of the tooltip.
     * - { maxWidth: 150 } => sets the width(in pixel) of the line.
     *
     * @defaultValue `false`
     */
    truncate?: boolean | TruncateOptions;
};
export interface TruncateOptions {
    maxWidth?: number;
    tooltipText?: string;
}
/**
 * The props type for {@link !components.Tile}.
 *
 * @category Component Props
 */
export interface TileProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * When set to `true`, reduces the default amount of padding around the contents of the Tile.
     *
     * @defaultValue `false`
     */
    compact?: boolean;
    /**
     * When set to `true`, removes left and right padding from tile contents.
     *
     * @defaultValue `false`
     */
    flush?: boolean;
}
/** @ignore */
interface Team {
    id: number;
    name: string;
    teammates: number[];
}
/**
 * The props type for {@link !components.Checkbox}.
 *
 * @category Component Props
 */
export interface CheckboxProps {
    /**
     * A string representing the value of the input. This is not displayed on the client-side,
     * but on the server this is the value given to the data submitted with the checkbox's name.
     */
    value?: string;
    /**
     * The current status of the input.
     */
    checked?: boolean;
    /** @deprecated use readOnly instead */
    readonly?: boolean;
    /**
     * When set to `true`, the option cannot be selected.
     */
    readOnly?: boolean;
    /**
     * The string that displays below the toggle.
     */
    description?: string;
    /**
     * The unique identifier for the checkbox element.
     */
    name?: string;
    /**
     * The size variation of the checkbox.
     *
     * @defaultValue `"default"`
     */
    variant?: 'default' | 'small';
    /**
     * A function that is called when the `checked` input status changes.
     *
     * @event
     */
    onChange?: (checked: boolean, value: string) => void;
    /** The text that displays in the dropdown menu. */
    children?: React.ReactNode;
    /**
     * Use the inline prop to arrange checkboxes side-by-side.
     */
    inline?: boolean;
    /**
     * When set to `true`, the option will be selected by default. Use it to
     * set the default `checked` state when the component is **uncontrolled**.
     */
    initialIsChecked?: boolean;
    /**
     * Accessibility label. It should be present when the checkbox has no label(children).
     */
    'aria-label'?: string;
}
/**
 * The props type for {@link !components.RadioButton}.
 * @category Component Props
 * @interface
 */
export type RadioButtonProps = Omit<CheckboxProps, 'aria-label'>;
export type ToggleGroupOption = {
    /** The text that displays in the dropdown menu. */
    label: string;
    /** The unique value that is submitted with the form. */
    value: string;
    /** When set to `true`, the option will be selected by default. */
    initialIsChecked?: boolean;
    /** When set to `true`, the option cannot be selected. */
    readonly?: boolean;
    /** The string that displays below the toggle. */
    description?: string;
};
interface ToggleGroupListBaseProps {
    name: ToggleGroupProps['name'];
    options: ToggleGroupProps['options'];
    variant: ToggleGroupProps['variant'];
    inline?: boolean;
}
export interface CheckboxListProps extends ToggleGroupListBaseProps {
    value?: CheckboxGroupProps['value'];
    onChange?: CheckboxGroupProps['onChange'];
}
export interface RadioButtonListProps extends ToggleGroupListBaseProps {
    value?: RadioButtonGroupProps['value'];
    onChange?: RadioButtonGroupProps['onChange'];
}
type ToggleType = 'checkboxList' | 'radioButtonList';
export interface CommonGroupProps {
    /**
     * Denotes the type of list to render.
     */
    toggleType?: ToggleType;
    /**
     * The unique identifier for the toggle group element.
     */
    name: string;
    /**
     * The label that displays above the toggle group.
     */
    label: string;
    /**
     * The text to display if the input has an error.
     */
    validationMessage?: string;
    /**
     * When set to `true`, displays a required indicator next to the toggle group.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * Text that will appear in a tooltip next to the toggle group label.
     */
    tooltip?: string;
    /**
     * When set to `true`, `validationMessage` is displayed as an error message if provided. The input will also render its error state to let the user know there is an error. If left false, `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * An array of options to display in the dropdown menu.
     *
     * @defaultValue `[]`
     */
    options: Array<ToggleGroupOption>;
    /**
     * When set to `true`, stacks the options horizontally.
     *
     * @defaultValue `false`
     */
    inline?: boolean;
    /**
     * The size variation of the individual options.
     *
     * @defaultValue `"default"`
     */
    variant?: 'default' | 'small';
    value?: string[] | string;
}
type CheckboxGroupProps = {
    /**
     * Denotes the type of list to render.
     *
     * @defaultValue `"checkboxList"`
     */
    toggleType: 'checkboxList';
    /**
     * A function that is called with the new value or values when the list is updated.
     *
     * @event
     */
    onChange?: (value: string[]) => void;
    /**
     * The value of the toggle group.
     */
    value?: string[];
} & CommonGroupProps;
type RadioButtonGroupProps = {
    /**
     * Denotes the type of list to render.
     *
     * @defaultValue `"checkboxList"`
     */
    toggleType: 'radioButtonList';
    /**
     * A function that is called with the new value or values when the list is updated.
     *
     * @event
     */
    onChange?: (value: string) => void;
    /**
     * The value of the toggle group.
     */
    value?: string;
} & CommonGroupProps;
type DefaultToggleTypeProps = {
    toggleType?: never;
} & CheckboxGroupProps;
/**
 * The props type for {@link !components.ToggleGroup}.
 *
 * @interface
 * @category Component Props
 */
export type ToggleGroupProps = CheckboxGroupProps | RadioButtonGroupProps | DefaultToggleTypeProps;
/** @ignore */
export interface UserContext {
    id: number;
    emails: string[];
    email: string;
    firstName: string;
    lastName: string;
    /** @deprecated Roles will always be empty. Please use teams instead */
    roles: string[];
    teams: Team[];
    locale?: string;
}
/** @ignore */
export interface PortalContext {
    id: number;
    timezone: string;
}
/** @ignore */
export interface CrmRecordContext {
    objectId: number;
    objectTypeId: string;
}
/** @ignore */
export interface AppContext {
    appId: number | string;
    appName?: string;
    cardTitle?: string;
}
/** @ignore */
export interface BaseContext {
    user: UserContext;
    portal: PortalContext;
}
/** @ignore */
export interface CrmContext extends BaseContext {
    location: 'crm.record.tab' | 'crm.record.sidebar' | 'crm.preview' | 'helpdesk.sidebar';
    crm: CrmRecordContext;
    extension?: AppContext;
}
/** @ignore */
export interface SettingsContext extends BaseContext {
    location: 'settings';
}
/** @ignore */
export interface GenericContext extends BaseContext {
    location: 'uie.playground.middle';
}
export interface StackProps {
    distance?: AllDistances;
    children?: React.ReactNode;
    direction?: 'row' | 'column';
    justify?: 'center' | 'end' | 'start';
    align?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    width?: 'auto' | '100%';
}
/**
 * The props type for {@link !components.Flex}.
 *
 * @category Component Props
 */
export interface FlexProps {
    /**
     * Sets the spacing between components.
     *
     * @defaultValue `"flush"`
     */
    gap?: AllDistances;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children?: ReactNode;
    /**
     * Arranges components `horizontally` or `vertically` by setting the main axis.
     *
     * @defaultValue `"row"`
     */
    direction?: 'row' | 'column';
    /**
     * Distributes components along the main axis using the available free space.
     *
     * @defaultValue `"start"`
     */
    justify?: 'center' | 'end' | 'start' | 'around' | 'between';
    /**
     * Distributes components along the cross-axis using the available free space.
     *
     * @defaultValue `"stretch"`
     */
    align?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    /**
     * Distributes a child component along the cross-axis using the available free space. Use this prop for nested child Flex and Box components to align them differently from other child components in the Flex.
     *
     */
    alignSelf?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    /**
     * Whether components will wrap instead of trying to fit on one line.
     *
     * @defaultValue `"nowrap"`
     */
    wrap?: boolean | 'wrap' | 'nowrap';
}
/**
 * The props type for {@link !components.StatisticsTrend}.
 *
 * @category Component Props
 */
export interface StatisticsTrendProps {
    /**
     * The text to be displayed as the trend value.
     */
    value: string;
    /**
     * The direction of the trend arrow.
     *
     * @defaultValue `"increase"`
     */
    direction: 'increase' | 'decrease';
    /**
     * The color of the trend arrow.
     */
    color?: 'red' | 'green';
}
/**
 * The props type for {@link !components.StatisticsItem}.
 *
 * @category Component Props
 */
export interface StatisticsItemProps {
    /**
     * The unique identifier.
     */
    id?: string;
    /**
     * The item's label text.
     */
    label: string;
    /**
     * The string to be displayed as the item's primary number.
     */
    number: string | number;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components. The children should be {@link !components.StatisticsTrend} or {@link !components.Text}.
     */
    children?: ReactNode;
}
/**
 * The props type for {@link !components.Statistics}.
 *
 * @category Component Props
 */
export interface StatisticsProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components. The children should be {@link !components.StatisticsItem}.
     */
    children: ReactNode;
}
/**
 * @category Serverless
 */
export interface ServerlessRunnerParams {
    /**
     * Name of the serverless function
     */
    name: string;
    /**
     * Names of CRM object properties to be retrieved and supplied to the function as `context.propertiesToSend`
     */
    propertiesToSend?: string[];
    /**
     * Additional parameters to be supplied to the function as `context.parameters`
     */
    parameters?: JsonValue;
    /**
     * @deprecated Optional payload supplied to the function as `context.event.payload`.
     * Support for this param may be removed in the future. Use `parameters` instead.
     */
    payload?: JsonValue;
}
/**
 * @category Serverless
 */
export declare enum ServerlessExecutionStatus {
    Success = "SUCCESS",
    Error = "ERROR"
}
/**
 * @category Serverless
 */
export type ServerlessExecutionResult = {
    status: ServerlessExecutionStatus.Success;
    response: JsonValue;
} | {
    status: ServerlessExecutionStatus.Error;
    message: string;
};
/**
 * @category Serverless
 */
export type ServerlessFuncRunner = (params: ServerlessRunnerParams) => Promise<ServerlessExecutionResult>;
/**
 *  @ignore
 *  @category Serverless
 */
export interface ServerlessExecutionRequest {
    appId: number;
    extensibleCardId: number;
    serverlessFunction: string;
    location: keyof ExtensionPoints;
    objectQuery?: {
        objectId: number;
        objectTypeId: string;
        objectPropertyNames: string[];
    };
    parameters?: JsonValue;
    event?: {
        type: 'SERVERLESS_ACTION_HOOK';
        payload: JsonValue;
    };
    objectId?: number;
    objectTypeId?: string;
}
/**
 * @category Serverless
 */
export interface ServerlessExecutionResponse {
    logId: string;
    response?: JsonValue;
}
/**
 * @category Serverless
 */
export interface ServerlessErrorResponse {
    responseJSON?: {
        message: string;
        correlationId: string;
        category: string;
        subCategory?: string;
        errors?: {
            message: string;
            subCategory: string;
        }[];
    };
    status: number;
}
/** @ignore */
export interface BaseExtensionContextData {
    appId: number | string;
    appName?: string;
    cardId: string;
    cardTitle?: string;
    location: keyof ExtensionPoints;
    sourceId?: string | null;
    appAccessLevel: 'PUBLIC' | 'PRIVATE';
    additionalProperties?: {
        [key: string]: string;
    } | null;
}
/** @ignore */
export interface CrmExtensionContextData extends BaseExtensionContextData {
    objectId: number | string;
    objectTypeId: string;
}
/** @ignore */
export type ExtensionPointAction = (...args: any[]) => Promise<any> | void;
/** @ignore */
export interface ExtensionPointContract {
    actions?: {
        [k: string]: ExtensionPointAction;
    } | {};
    context: BaseContext;
    customComponents: Record<string, ComponentType<any>>;
}
/** @ignore */
type AlertType = 'info' | 'warning' | 'success' | 'danger' | 'tip' | undefined;
/** @ignore */
export type AddAlertAction = (args: {
    type?: AlertType;
    message: string;
    title?: string;
}) => void;
/** @ignore */
export type ReloadPageAction = () => void;
/** @ignore */
export type FetchCrmObjectPropertiesAction = (properties: string[] | '*') => Promise<Record<string, string>>;
/** @ignore */
export type OpenIframeModalAction = (action: OpenIframeActionPayload, onClose?: () => void) => void;
/** @ignore */
export type refreshObjectPropertiesAction = () => void;
/** @ignore */
export type onCrmPropertiesUpdateAction = (properties: string[] | '*', callback: (properties: Record<string, string>, error?: {
    message: string;
}) => void) => void;
/** @ignore */
export type CloseOverlayAction = (id: string) => void;
/** @ignore */
export interface CrmHostActions {
    addAlert: AddAlertAction;
    reloadPage: ReloadPageAction;
    fetchCrmObjectProperties: FetchCrmObjectPropertiesAction;
    openIframeModal: OpenIframeModalAction;
    refreshObjectProperties: refreshObjectPropertiesAction;
    onCrmPropertiesUpdate: onCrmPropertiesUpdateAction;
}
/** @ignore */
export interface UiePlatformActions {
    copyTextToClipboard: Clipboard['writeText'];
    closeOverlay: CloseOverlayAction;
}
/** @ignore */
export interface StandardCrmExtensionPoint extends ExtensionPointContract {
    actions: CrmHostActions & UiePlatformActions;
    context: CrmContext;
    customComponents: {
        CrmPropertyList: ComponentType<CrmPropertyListProps>;
        CrmAssociationTable: ComponentType<CrmAssociationTableProps>;
        CrmDataHighlight: ComponentType<CrmDataHighlightProps>;
        CrmReport: ComponentType<CrmReportProps>;
        CrmAssociationPivot: ComponentType<CrmAssociationPivotProps>;
        CrmAssociationPropertyList: ComponentType<CrmAssociationPropertyListProps>;
        CrmAssociationStageTracker?: ComponentType<CrmAssociationStageTrackerProps>;
        CrmSimpleDeadline?: ComponentType<CrmSimpleDeadlineProps>;
        CrmRelativeTimeline?: ComponentType<CrmRelativeTimelineProps>;
        CrmStageTracker: ComponentType<CrmStageTrackerProps>;
        CrmStatistics?: ComponentType<CrmStatisticsProps>;
        CrmActionButton?: ComponentType<CrmActionButtonProps>;
        CrmActionLink?: ComponentType<CrmActionLinkProps>;
        CrmCardActions?: ComponentType<CrmCardActionsProps>;
    };
}
/** @deprecated this interface has been replaced by StandardCrmExtensionPoint */
export interface CrmMiddleExtensionPoint extends ExtensionPointContract {
    actions: CrmHostActions;
    context: CrmContext;
    customComponents: {
        CrmPropertyList: ComponentType<CrmPropertyListProps>;
        CrmAssociationTable: ComponentType<CrmAssociationTableProps>;
        CrmDataHighlight: ComponentType<CrmDataHighlightProps>;
        CrmReport: ComponentType<CrmReportProps>;
        CrmAssociationPivot: ComponentType<CrmAssociationPivotProps>;
        CrmAssociationPropertyList: ComponentType<CrmAssociationPropertyListProps>;
        CrmAssociationStageTracker?: ComponentType<CrmAssociationStageTrackerProps>;
        CrmSimpleDeadline?: ComponentType<CrmSimpleDeadlineProps>;
        CrmRelativeTimeline?: ComponentType<CrmRelativeTimelineProps>;
        CrmStageTracker: ComponentType<CrmStageTrackerProps>;
        CrmStatistics?: ComponentType<CrmStatisticsProps>;
        CrmActionButton?: ComponentType<CrmActionButtonProps>;
        CrmActionLink?: ComponentType<CrmActionLinkProps>;
        CrmCardActions?: ComponentType<CrmCardActionsProps>;
    };
}
/** @ignore */
export interface CrmSidebarExtensionPoint extends ExtensionPointContract {
    actions: CrmHostActions & UiePlatformActions;
    context: CrmContext;
    customComponents: {
        CrmActionButton?: ComponentType<CrmActionButtonProps>;
        CrmActionLink?: ComponentType<CrmActionLinkProps>;
    };
}
/** @ignore */
export interface SettingsExtensionPoint extends ExtensionPointContract {
    actions: UiePlatformActions;
    context: SettingsContext;
}
/** @ignore */
export interface CrmDataHighlightProps {
    properties: Array<string>;
    objectTypeId?: string;
    objectId?: number;
}
/** @ignore */
export interface CrmReportProps {
    reportId: string;
    use?: 'associations' | 'subject' | 'unfiltered';
}
/** @ignore */
export interface CrmPropertyListProps {
    properties: Array<string>;
    direction?: string;
    objectTypeId?: string;
    objectId?: number;
}
/** @ignore */
type CrmSortDescriptor = {
    columnName: string;
    direction: 1 | -1;
};
/** @ignore */
interface CrmSearchFilter {
    operator: 'EQ' | 'NEQ' | 'LT' | 'LTE' | 'GT' | 'GTE' | 'BETWEEN' | 'IN' | 'NOT_IN' | 'HAS_PROPERTY' | 'NOT_HAS_PROPERTY';
    value?: string | number;
    values?: string | number;
    highValue?: string | number;
    property: string;
}
/** @ignore */
export interface CrmAssociationTableProps {
    objectTypeId: string;
    propertyColumns: Array<string>;
    quickFilterProperties?: Array<string>;
    searchable?: boolean;
    pagination?: boolean;
    associationLabelFilter?: boolean;
    pageSize?: number;
    preFilters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmAssociationPivotProps {
    objectTypeId: string;
    associationLabels?: Array<string>;
    maxAssociations?: number;
    preFilters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmAssociationPropertyListProps {
    objectTypeId: string;
    properties: Array<string>;
    associationLabels?: Array<string>;
    filters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmAssociationStageTrackerProps {
    objectTypeId: string;
    properties: Array<string>;
    associationLabels?: Array<string>;
    filters?: Array<CrmSearchFilter>;
    showProperties?: boolean;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmSimpleDeadlineProps {
    endDatePropertyName: string;
    properties: Array<string>;
    progressTheme?: ProgressTheme;
    showProperties?: boolean;
    startDatePropertyName: string;
}
/** @ignore */
export interface CrmRelativeTimelineProps {
    properties: Array<string>;
}
/** @ignore */
export interface CrmStageTrackerProps {
    objectId?: number;
    objectTypeId?: string;
    properties: Array<string>;
    showProperties?: boolean;
}
/** @ignore */
interface BaseCrmStatisticItem {
    label: string;
}
/** @ignore */
interface FilterGroup {
    filters: Array<CrmSearchFilter>;
}
/** @ignore */
interface ProgressTheme {
    backgroundColor?: string;
    completedColor?: string;
    upcomingColor?: string;
    borderRadius?: string | number;
    height?: string | number;
    completedGradient?: Gradient;
    upcomingGradient?: Gradient;
}
/** @ignore */
interface Gradient {
    startColor: string;
    endColor: string;
}
/** @ignore */
interface BasicMetricItem extends BaseCrmStatisticItem {
    statisticType: 'SUM' | 'AVG' | 'MIN' | 'MAX' | 'DISTINCT_APPROX' | 'COUNT';
    propertyName: string;
    filterGroups?: Array<FilterGroup>;
}
/** @ignore */
interface PercentileMetricItem extends BaseCrmStatisticItem {
    statisticType: 'PERCENTILES';
    propertyName: string;
    percentile: number;
    filterGroups?: Array<FilterGroup>;
}
/** @ignore */
type CrmStatisticItem = BasicMetricItem | PercentileMetricItem;
/** @ignore */
export interface CrmStatisticsProps {
    objectTypeId: string;
    statistics: Array<CrmStatisticItem>;
}
/** @ignore */
interface ObjectCoordinates {
    objectTypeId: string;
    objectId: number;
}
/** @ignore */
interface OpenRecordAssociationFormArgs {
    objectTypeId: string;
    association: {
        objectTypeId: string;
        objectId: number;
    };
}
/** @ignore */
interface ActivityCreatorActionArgs {
    objectTypeId: string;
    objectId: number;
    windowVariant?: 'windowed' | 'fullscreen';
}
/** @ignore */
interface EngagementAppLinkArgs {
    objectId: number | string;
    objectTypeId: string;
    engagementId: number | string;
    external?: boolean;
}
/** @ignore */
interface RecordAppLinkArgs {
    includeEschref?: boolean;
    objectId: number;
    objectTypeId: string;
    external?: boolean;
}
/** @ignore */
interface PageAppLinkArgs {
    path: string;
    external?: boolean;
}
/** @ignore */
interface ExternalUrlArgs {
    href: string;
}
interface OpenRecordCreatorFormArgs {
    objectTypeId: string;
}
/** @ignore */
interface ActionArgs {
    PREVIEW_OBJECT: ObjectCoordinates;
    ADD_NOTE: ActivityCreatorActionArgs;
    ADD_TASK: ActivityCreatorActionArgs;
    SEND_EMAIL: ActivityCreatorActionArgs;
    SCHEDULE_MEETING: ActivityCreatorActionArgs;
    OPEN_RECORD_CREATOR_FORM: OpenRecordCreatorFormArgs;
    OPEN_RECORD_ASSOCIATION_FORM: OpenRecordAssociationFormArgs;
    ENGAGEMENT_APP_LINK: EngagementAppLinkArgs;
    RECORD_APP_LINK: RecordAppLinkArgs;
    PAGE_APP_LINK: PageAppLinkArgs;
    EXTERNAL_URL: ExternalUrlArgs;
    OPEN_WORKFLOW_ENROLLMENT_MODAL: ObjectCoordinates;
}
/** @ignore */
export type ArgsFor<SpecificActionType extends ActionType> = ActionArgs[SpecificActionType];
export type ActionType = 'PREVIEW_OBJECT' | 'ADD_NOTE' | 'ADD_TASK' | 'SEND_EMAIL' | 'SCHEDULE_MEETING' | 'OPEN_RECORD_CREATOR_FORM' | 'OPEN_RECORD_ASSOCIATION_FORM' | 'ENGAGEMENT_APP_LINK' | 'RECORD_APP_LINK' | 'PAGE_APP_LINK' | 'EXTERNAL_URL' | 'OPEN_WORKFLOW_ENROLLMENT_MODAL';
/** @ignore */
interface BaseActionComponent {
    children: ReactNode;
    actionType: ActionType;
    actionContext: ArgsFor<ActionType>;
    onError?: (errors: string[]) => void;
}
/** @ignore */
export interface CrmActionButtonProps extends BaseActionComponent {
    variant?: 'primary' | 'secondary' | 'destructive';
    type?: 'button' | 'reset' | 'submit';
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    onClick?: () => void;
}
/** @ignore */
export interface CrmActionLinkProps extends BaseActionComponent {
    variant?: 'primary' | 'light' | 'dark' | 'destructive';
}
/** @ignore */
export interface ActionLibraryButtonCardActionConfig<SpecificActionType extends ActionType = ActionType> {
    type: 'action-library-button';
    actionType: SpecificActionType;
    actionContext: ArgsFor<SpecificActionType>;
    label?: string;
    disabled?: boolean;
    tooltipText?: string;
}
/** @ignore */
export type DropdownCardActionConfigOptions = [
    ActionLibraryButtonCardActionConfig,
    ...ActionLibraryButtonCardActionConfig[]
];
/** @ignore */
export interface DropdownCardActionConfig {
    type: 'dropdown';
    options: DropdownCardActionConfigOptions;
    label?: string;
    disabled?: boolean;
    tooltipText?: string;
}
/** @ignore */
type ErrorHandler = (errors: string[]) => void;
/** @ignore */
type CardActionConfig = ActionLibraryButtonCardActionConfig | DropdownCardActionConfig;
/** @ignore */
export type CrmCardActionsProps = {
    actionConfigs: Array<CardActionConfig>;
    onError?: ErrorHandler;
};
/** @ignore */
interface RemotePlaygroundExtensionPoint extends ExtensionPointContract {
    actions: {
        warn: () => void;
    };
    context: GenericContext;
    customComponents: {
        ExampleCrmComponent: ComponentType<ExampleCrmComponentProps>;
    };
}
export declare const EXTENSION_POINT_LOCATIONS: readonly ["crm.preview", "crm.record.sidebar", "crm.record.tab", "helpdesk.sidebar", "uie.playground.middle", "settings"];
export type ExtensionPointLocation = TypesOfReadOnlyArray<typeof EXTENSION_POINT_LOCATIONS>;
/** @ignore */
interface LocationToExtensionPoint {
    'uie.playground.middle': RemotePlaygroundExtensionPoint;
    'crm.record.tab': StandardCrmExtensionPoint;
    'crm.preview': StandardCrmExtensionPoint;
    'crm.record.sidebar': CrmSidebarExtensionPoint;
    'helpdesk.sidebar': StandardCrmExtensionPoint;
    settings: SettingsExtensionPoint;
}
/**
 * While this resolves to the same result as LocationToExtensionPoint, it ensures that every location
 * from ExtensionPointLocation is explicitly included. This way, EXTENSION_POINT_LOCATIONS becomes
 * the single source of truth for defining all locations.
 */
type _ExtensionPoints = {
    [key in ExtensionPointLocation]: LocationToExtensionPoint[key];
};
export interface ExtensionPoints extends _ExtensionPoints {
}
export interface ExampleCrmComponentProps {
    name: string;
    size: 'sm' | 'md' | 'lg';
    count: number;
}
/** @ignore */
export type PanelAction = (panelId: string) => void;
/** @ignore */
export type ModalAction = (modalId: string) => void;
/** @ignore */
export interface Reactions {
    openPanel: PanelAction;
    closePanel: PanelAction;
    openModal: ModalAction;
    closeModal: ModalAction;
}
/** @ignore */
export interface ExtensionPointApi<ExtensionPointName extends keyof ExtensionPoints> {
    runServerlessFunction: ServerlessFuncRunner;
    actions: ExtensionPoints[ExtensionPointName]['actions'];
    context: ExtensionPoints[ExtensionPointName]['context'];
}
/** @ignore */
interface OpenIframeActionPayload {
    uri: string;
    height: number;
    width: number;
    /** @deprecated This property is no longer functional and has no effect. Please avoid using it, as it will be removed in future updates */
    associatedObjectProperties?: string[];
    title?: string;
    flush?: boolean;
}
/**
 * The props type for {@link !components.LoadingSpinner}.
 *
 * @category Component Props
 */
export interface LoadingSpinnerProps {
    /**
     * The text that displays next to the spinner.
     *
     */
    label: string;
    /**
     * When set to `true`, the label will appear next to the spinner.
     *
     * @defaultValue `false`
     */
    showLabel?: boolean;
    /**
     * The size of the spinner.
     *
     * @defaultValue `"sm"`
     */
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    /**
     * The position of the spinner. Can be one of `inline` or `centered`.
     *
     * @defaultValue `"inline"`
     */
    layout?: 'inline' | 'centered';
}
export interface AlignmentProps {
    align?: 'left' | 'center' | 'right';
}
export interface WidthProps {
    width?: 'min' | 'max' | 'auto' | number;
}
export interface TableElementProps {
    children: React.ReactNode;
}
/**
 * @property align Sets the alignment of a table header.
 * @property width Sets the width of a table header.
 *
 * @interface
 */
export type BaseTableHeaderProps = TableElementProps & AlignmentProps & WidthProps;
export type TableCellProps = TableElementProps & AlignmentProps & WidthProps;
/**
 * The props type for {@link !components.TableHeader} when sorted === never.
 *
 * @category Component Props
 */
export interface UnSortedTableHeaderProps extends BaseTableHeaderProps {
    sortDirection?: 'never';
}
/**
 * The props type for {@link !components.TableHeader} when sorted !== never.
 *
 * @category Component Props
 */
export interface SortedTableHeaderProps extends BaseTableHeaderProps {
    /**
     * Sets the current direction in which the column is sorted (if any). It's a visual indicator, it doesn't modify the data.
     *
     * @defaultValue `"none"`
     */
    sortDirection: 'ascending' | 'descending' | 'none';
    /**
     * A callback function that is invoked when the header is clicked. It recieves the new `sortDirection` as an argument.
     * It's required when sort = `ascending`, `descending` or `none`.
     *
     * @event
     * @defaultValue `"none"`
     */
    onSortChange: (value: NonNullable<SortedTableHeaderProps['sortDirection']>) => void;
    /**
     * If `true`, users cannot change the sort ordering. It has no effect if sort=`never` or `undefined`.
     *
     *  @defaultValue `false`
     */
    disabled?: boolean;
}
/**
 * The props type for {@link !components.TableHeader}.
 *
 * @category Component Props
 */
export type TableHeaderProps = SortedTableHeaderProps | UnSortedTableHeaderProps;
interface BaseTableProps {
    /**
     * When set to false, the table will not have borders.
     *
     * @defaultValue `true`
     */
    bordered?: boolean;
    /**
     * When set to `true`, the table will not have bottom margin.
     *
     * @defaultValue `false`
     */
    flush?: boolean;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components. The children should be one of Table's subcomponents.
     */
    children: React.ReactNode;
}
/**
 * @internal
 */
export interface TableNoPaginatedProps extends BaseTableProps {
    /**
     * When set to `true`, the table will include pagination navigation. Take a look at {@link !types.TablePaginatedProps} for pagination props.
     *
     * @defaultValue `false`
     */
    paginated?: false;
}
/**
 * @internal
 */
export interface TablePaginatedProps extends BaseTableProps {
    /**
     * When set to `true`, the table will include pagination navigation. Take a look at {@link !types.TablePaginatedProps} for pagination props.
     *
     * @defaultValue `false`
     */
    paginated: true;
    /**
     * The total number of pages available.
     */
    pageCount: number;
    /**
     * When set to `false`, hides the text labels for the First/Prev/Next buttons. The button labels will still be accessible to screen readers.
     *
     * @defaultValue `true`
     */
    showButtonLabels?: boolean;
    /**
     * When set to `true`, displays the **First/Last** page buttons.
     *
     * @defaultValue `false`
     */
    showFirstLastButtons?: boolean;
    /**
     * Sets how many page buttons are displayed.
     */
    maxVisiblePageButtons?: number;
    /**
     * Denotes the current page.
     */
    page?: number;
    /**
     * A function that will be invoked when the pagination button is clicked. It receives the new page number as argument.
     *
     * @event
     */
    onPageChange: (pageNumber: number) => void;
}
/**
 * The props type for {@link !components.Table}.
 *
 * @category Component Props
 */
export type TableProps = TableNoPaginatedProps | TablePaginatedProps;
/** @deprecated use ExtensionEvent/FormSubmitExtensionEvent instead */
export declare class RemoteEvent<V> {
    type: string;
    bubbles: boolean;
    timeStamp: number;
    targetValue: V;
    constructor(value: V, event: Event);
}
export type HrefOptions = {
    url: string;
    external?: boolean;
};
export type HrefProp = string | HrefOptions;
/**
 * The props type for {@link !components.Link}.
 *
 * @category Component Props
 */
export interface LinkProps extends OverlayComponentProps {
    /**
     * Sets the content that will render inside the component.
     *
     */
    children: ReactNode;
    /**
     * The URL that will be opened on click. Links to pages in the HubSpot account will open in the same tab, while non-HubSpot links will open in a new tab.
     *
     */
    href: HrefProp;
    /**
     * The color variation of the link.
     *
     * @defaultValue `"primary"`
     */
    variant?: 'primary' | 'destructive' | 'light' | 'dark';
    /**
     * A function that will be invoked with the link is clicked.
     *
     * @event
     */
    onClick?: ReactionsHandler<ExtensionEvent>;
    /**
     * When set to true, `event.preventDefault()` will be invoked before the `onClick` function is called, preventing automatic navigation to the href URL.
     *
     * @defaultValue `false`
     */
    preventDefault?: boolean;
}
export type JsonValue = string | number | boolean | null | JsonValue[] | {
    [key: string]: JsonValue;
};
/**
 * The props type for {@link !components.Box}.
 *
 * @category Component Props
 */
export interface BoxProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * Overrides Flex's `alignItem` value for this element.
     *
     * @defaultValue `"auto"`
     */
    alignSelf?: 'start' | 'center' | 'baseline' | 'end' | 'stretch' | 'auto';
    /**
     * Sets how the item will grow or shrink when it's a direct ancestor of the Flex component.
     * ##### Options in detail
     *
     *- `initial`: The item is sized according to its width and height properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container.
     *- `auto`: The item is sized according to its width and height properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container.
     *- `none`: The item is sized according to its width and height properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container.
     *- `number`:  Tells a component to fill all available space, shared evenly amongst other components with the same parent. The larger the flex given, the higher the ratio of space a component will take compared to its siblings.
     *
     * @defaultValue `"initial"`
     */
    flex?: 'initial' | 'auto' | 'none' | number;
}
export interface TShirtSizes {
    xs: 'extra-small' | 'xs';
    sm: 'small' | 'sm';
    md: 'medium' | 'md';
    lg: 'large' | 'lg';
    xl: 'extra-large' | 'xl';
}
export type AllSizes = TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'] | TShirtSizes['xl'];
export type AllDistances = 'flush' | AllSizes;
/**
 * The props type for {@link !components.StepIndicator}.
 *
 * @category Component Props
 */
export interface StepIndicatorProps {
    /**
     * An array containing the name of each step.
     */
    stepNames: string[];
    /**
     * The orientation of the indicator.
     *
     * @defaultValue `"horizontal"`
     */
    direction?: 'horizontal' | 'vertical';
    /**
     * The size of the indicator circles.
     *
     * @defaultValue `"small"`
     */
    circleSize?: AllSizes;
    /**
     * The currently active step. Steps are 0-based.
     */
    currentStep?: number;
    /**
     * The visual style of the component.
     *
     * - default: default spacing.
     * - compact: only shows the title of the currently active step.
     * - flush: only shows the title of the currently active step and removes left and right margins.
     *
     * @defaultValue `"default"`
     */
    variant?: 'default' | 'compact' | 'flush';
    /**
     * A function that will be invoked when a step in the indicator is clicked. The function receives the current step index as an argument (zero-based). Use this to update the currently active step.
     *
     * @event
     */
    onClick?: (stepIndex: number) => void;
}
/**
 * The props type for {@link !components.Accordion}.
 *
 * @category Component Props
 */
export interface AccordionProps {
    /**
     * The title text for the accordion.
     *
     */
    title: string;
    /**
     * The main content of the accordion when it opens.
     *
     */
    children: ReactNode;
    /**
     * Defines default open behavior on page load. When set to `true`, the accordion will be open by default on initial load.
     *
     * @defaultValue `false`
     */
    defaultOpen?: boolean;
    /**
     * When set to `true`, the accordion's open state cannot be changed.
     *
     * @defaultValue `false`
     */
    disabled?: boolean;
    /**
     * For controlling the accordion's open state programmatically. When set to `true`, the accordion will open. Takes precedence over `defaultOpen`.
     *
     */
    open?: boolean;
    /**
     * The size of the accordion title.
     *
     * @defaultValue `"small"`
     */
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    /**
     * A function that will be invoked when the title is clicked. It receives no arguments and its return value is ignored.
     *
     * @event
     */
    onClick?: () => void;
}
/**
 * The props type for {@link !components.List}.
 *
 * @category Component Props
 */
export interface ListProps {
    /**
     * The content of the list. Each child will be wrapped in an `li` tag.
     */
    children: ReactNode;
    /**
     * The type of list to render.
     *
     * @defaultValue `"unordered"`
     */
    variant?: 'unordered' | 'unordered-styled' | 'ordered' | 'ordered-styled' | 'inline' | 'inline-divided';
}
/**
 * The props type for {@link !components.Toggle}.
 *
 * @category Component Props
 */
export interface ToggleProps {
    /**
     * The current status of the input.
     */
    checked?: boolean;
    /**
     * When set to `true`, the option cannot be selected.
     */
    readonly?: boolean;
    /**
     * The unique identifier for the toggle element.
     */
    name?: string;
    /**
     * The size variation of the toggle.
     *
     * @defaultValue `"medium"`
     */
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'] | 'default';
    /**
     * A function that is called when the `checked` input status changes.
     *
     * @event
     */
    onChange?: (checked: boolean) => void;
    /**
     * When set to `true`, the option will be selected by default. Use it to
     * set the default `checked` state when the component is **uncontrolled**.
     */
    initialIsChecked?: boolean;
    /**
     * The companion text of for Toggle. It can be displayed on top,
     * inline, or hidden. When hidden, it will remain usable for screen readers.
     */
    label: string;
    /**
     * Controls the display setting of the label prop.
     *
     * @defaultValue `"inline"`
     */
    labelDisplay?: 'inline' | 'top' | 'hidden';
    /**
     * The text that appears on the Toggle when `checked={true}`.
     *
     * @defaultValue `"ON"`
     */
    textChecked?: string;
    /**
     * The text that appears on the Toggle when `checked={false}`.
     *
     * @defaultValue `"ON"`
     */
    textUnchecked?: string;
}
export interface PanelProps {
    /**
     * Accessibility label.
     *
     */
    'aria-label'?: string;
    /**
     * The main content of the panel when it opens.
     *
     */
    children?: React.ReactNode;
    /**
     * A unique ID for the panel
     *
     */
    id: string;
    /**
     * A function that will be invoked when the panel has finished opening.
     *
     */
    onOpen?: () => void;
    /**
     * A function that will be invoked when the panel has finished closing.
     *
     */
    onClose?: () => void;
    /**
     * The width of the panel
     *
     * @defaultValue `"sm"`
     */
    width?: TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'];
    /**
     * The title of the panel
     *
     */
    title?: string;
    /**
     * The variant of the panel
     *
     * @defaultValue `"default"`
     */
    variant?: 'modal' | 'default';
}
export interface PanelSectionProps {
    /**
     * When set to `true`, the section will have no bottom margin
     *
     * @defaultValue `false`
     */
    flush?: boolean;
    /**
     * The main content of the section
     *
     */
    children: React.ReactNode;
}
export interface ModalProps {
    /**
     * Accessibility label.
     *
     */
    'aria-label'?: string;
    /**
     * The main content of the modal when it opens.
     *
     */
    children?: React.ReactNode;
    /**
     * A unique ID for the modal
     *
     */
    id: string;
    /**
     * A function that will be invoked when the modal has finished opening.
     *
     */
    onOpen?: () => void;
    /**
     * A function that will be invoked when the modal has finished closing.
     *
     */
    onClose?: () => void;
    /**
     * The width of the modal
     *
     * @defaultValue `"sm"`
     */
    width?: TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'];
    /**
     * The title of the modal
     *
     */
    title?: string;
    /**
     * The variant of the modal
     *
     * @defaultValue `"default"`
     */
    variant?: 'danger' | 'default';
}
export interface ModalBodyProps {
    /**
     * The main content of the modal
     *
     */
    children: React.ReactNode;
}
export interface ModalFooterProps {
    /**
     * The footer of the modal
     *
     */
    children: React.ReactNode;
}
export interface PanelBodyProps {
    /**
     * The main content of the body
     *
     */
    children: React.ReactNode;
}
export interface PanelFooterProps {
    /**
     * The main content of the footer
     *
     */
    children: React.ReactNode;
}
export interface DropdownOption {
    /**
     * Text to be displayed as the menu item text.
     *
     */
    label: string;
    /**
     * A function that will be invoked when the item is clicked.
     * It receives no arguments and its return value is ignored.
     *
     * @event
     */
    onClick?: () => void;
}
/**
 * The props type for {@link !components.Dropdown}.
 *
 * @category Component Props
 */
export interface DropdownProps {
    /**
     * The list of options to be rendered within the dropdown menu.
     * Each option represents an entry in the Dropdown.
     */
    options: DropdownOption[];
    /**
     * Controls the appearance of the dropdown button
     *
     * @defaultValue `"secondary"`
     */
    variant?: 'primary' | 'secondary' | 'transparent';
    /**
     * Sets the content for the dropdown button.
     *
     * @defaultValue `"More"`
     */
    buttonText?: string;
    /**
     * Sets the size of the dropdown button.
     *
     * @defaultValue `"md"`
     */
    buttonSize?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    /**
     * Disables the ability to focus and click-to-expand of the dropdown button
     *
     * @defaultValue `false`
     */
    disabled?: boolean;
}
export interface HubSpotFetchOptions {
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    timeout?: number;
    body?: {
        [key: string]: unknown;
    };
    headers?: Headers | Record<string, string>;
}
export type HubSpotFetchRequestURI = string | URL;
export type ProxyMetadata = {
    userEmail?: string;
    userId?: number;
    portalId?: number;
};
export {};
